@model UsersApp.ViewModels.AccountEditViewModel
@using System.Security.Claims

@{
    ViewData["Title"] = "Professor Panel";
    Layout = "~/Views/Shared/_PanelLayout.cshtml";
}
<html>
<head>
    <link rel="stylesheet" href="~/css/Global/Header.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/AccountEdit.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/reports.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/StudentDashboard.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/print.css" media="print" asp-append-version="true" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Rum+Raisin&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <style>
        .flashcard-item {
    position: relative;
    padding: 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: box-shadow 0.3s;
}

.flashcard-item:hover {
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.buttons-container {
    position: absolute;
    bottom: 10px;
    left: 10px;
    right: 10px;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    opacity: 0;
    transition: opacity 0.3s;
}

.flashcard-item:hover .buttons-container {
    opacity: 1;
}

.view-btn, .delete-btn {
    padding: 5px 10px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
}

.view-btn {
    background-color: #4CAF50;
    color: white;
}

.delete-btn {
    background-color: #f44336;
    color: white;
}

.f-collection {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
}

.flashcard-item {
    position: relative;
    width: 300px;
    padding: 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: box-shadow 0.3s, transform 0.3s;
}

.flashcard-item:hover {
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
    transform: translateY(-5px);
}


.flashcard-item:hover .buttons-container {
    opacity: 1;
}

.view-btn, .delete-btn {
    padding: 5px 15px;
    border: none;
    border-radius: 3px;
    font-size: 14px;
    cursor: pointer;
}

.view-btn {
    background-color: #4CAF50;
    color: white;
}

.delete-btn {
    background-color: #f44336;
    color: white;
}
    </style>
</head>
<body>
    <div class="SideBar">
        <button class="HomeButton" onclick="showSection('Home')"><img src="../Assets/AccountEdit/bahay.png">Home</button>
        <button class="FlashcardsButton" onclick="showSection('Flashcards')"><img src="../Assets/AccountEdit/3.png">Flashcards</button>
        <button class="QuizButton" onclick="showSection('Quiz')"><img src="../Assets/AccountEdit/utak 1.png">Quiz</button>
        <button class="QuizButton" onclick="showSection('AccountSettings')"><img src="../Assets/AccountEdit/setings.png" class="ads">Account Settings</button>
    </div>
    <div class="Content">
        <div class="Home section" id="Home" style="display: block;">
            <h1 class="quiz-report-titles admin-panel-title"> Quiz Report</h1>
            <p class="quiz-report-description">Overview of Quiz, Manual and AI</p>
            <div class="filter-dropdown">
                <select id="filterDropdown"onchange="filterData(this.value)">
                    <option value="today">Today</option>
                    <option value="thisweek">This Week</option>
                    <option value="thisyear">This Year</option>
                    <option value="all">All</option>
                </select>
            </div>
            <div class="quiz-top-chart-container">
                <div>
                    <div class="quiz-box-pie-chart">
                        @if (@Model.ManualQuizCount == 0 && @Model.AiQuizCount == 0)
                        {
                            <h1>There Are currently no quizzes Created @ViewData["FilterPeriod"]</h1>
                        }
                        else
                        {
                            <canvas class="myPieChart1" id="myPieChart1" width="220" height="240"></canvas>
                        }
                    </div>
                    <p class="quiz-report-note"> AI Generated vs Manually Created</p>
                </div>

                <div class="quiz-box-reports">
                    <div class="sp">
                        <div class="l">
                            <div class="number-of-quiz">
                                <h1>AI Generated Quizzes</h1>
                                @Model.AiQuizCount
                            </div>
                        </div>
                        <div class="r">
                            <div class="number-of-quiz">
                                <h1>Manual Generated Quizzes</h1>
                                @Model.ManualQuizCount
                            </div>
                        </div>
                    </div>
                    <div class="content-created">
                        Total Number of Quiz Created: @Model.TotalQuizCount
                    </div>
                </div>
            </div>

            <h1 class="flashcards-report-titles"> Flashcards Report</h1>
            <p class="flashcards-report-description">Overview of Flashcards, Manual and AI</p>

            <div class="flashcards-top-chart-container">
                <div>
                    <div class="flashcards-box-pie-chart">
                    @if ((int)@ViewData["aiFlashcardCount"] == 0 && (int)@ViewData["manualFlashcardCount"] == 0)
                    {
                        <h1 style="text-align: center;">There Are currently no flashcards Created @ViewData["FilterPeriod"]</h1>
                    }
                    else
                    {
                        <canvas class="myPieChart2" id="myPieChart2" width="220" height="240"></canvas>
                    }
                </div>
                    <p class="flashcards-report-note"> AI Generated vs Manually Created</p>
                </div>

                <div class="flashcards-box-reports">
                    <div class="sp">
                        <div class="l">
                            <div class="number-of-quiz">
                                <h1>AI Generated Flashcards</h1>
                                @ViewData["aiFlashcardCount"]
                            </div>
                        </div>
                        <div class="r">
                            <div class="number-of-quiz">
                                <h1>Manual Generated Flashcards</h1>
                                @ViewData["manualFlashcardCount"]
                            </div>
                            <div class="number-of-flashcards">
                                @* Manually Created FlashCard: @ViewData["manualFlashcardCount"] *@
                            </div>
                        </div>
                    </div>
                    <div class="content-created">
                        Total Number of Flashcards: @ViewData["totalFlashcardCount"]
                    </div>
                </div>
            </div>
            <button onclick="window.print();" class="print-button">Print</button>
        </div>

        <div asp-validation-summary="All" class="text-danger"></div>

<div class="f-content">
    <div class="Flashcards section" id="Flashcards" style="display: none;">
        <div class="f-head">
            <h1>Flashcards</h1>
        </div>
        <div class="f-collection">
            @if (Model.Flashcards != null && Model.Flashcards.Any())
            {
                @foreach (var flashcard in Model.Flashcards.Where(f => f.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier)))
                {
                    <div id="flashcard-@flashcard.Id" class="flashcard-item" data-title="@flashcard.Title.ToLower()" onclick="takeFlashcard(@flashcard.Id)">
                        <div class="f-info">
                            <p>@flashcard.Id</p>
                            <h2>@flashcard.Title &#8203; &#8203; &#8203; @(flashcard.Questions?.Count ?? 0) Questions</h2>
                            <h2>@ViewData["Username"]</h2>
                        </div>
                        <div class="bot">
                            <div class="divider"></div>
                            <div class="f-desc">@flashcard.Description</div>
                        </div>
                        <div class="buttons-container">
                            <button class="view-btn" onclick="event.stopPropagation(); location.href='@Url.Action("FlashCardStudyMode", "FlashCards", new { id = flashcard.Id })'">View</button>
                            <button class="delete-btn" onclick="event.stopPropagation(); deleteFlashcard(@flashcard.Id)">Delete</button>
                        </div>
                    </div>
                }
            }
            else
            {
                <h1 style="grid-column: 1 / -1; text-align: center;">There Are currently no flashcards Created @ViewData["FilterPeriod"]</h1>
            }
        </div>
    </div>

        <div class="Quiz section" id="Quiz" style="display: none;">
            <div class="Q-Head">
                <h1>Quizzes</h1>
            </div>
            <div class="quizzes-container">
            @if (Model.Quizzes != null && Model.Quizzes.Any())
            {
                @foreach (var quiz in Model.Quizzes)
                {
                    <div id="quiz-@quiz.QuizId" class="flashcard-item">
                        <h1>@quiz.Topic</h1>
                        <h2>@quiz.GradeLevel</h2>
                        <div class="buttons-container">
                            <button class="view-btn" onclick="location.href='@Url.Action("ViewQuizDetails", "QuizCreation", new { id = quiz.QuizId })'">View</button>
                            <button class="delete-btn" onclick="deleteQuiz(@quiz.QuizId)">Delete</button>
                        </div>
                    </div>
                }
            }else{
                <h1>There Are currently no Quizzes Created @ViewData["FilterPeriod"]</h1>
            }
            </div>
        </div>

       <div class="AccountSettings section" id="AccountSettings" style="display: none;">
            <h1 class="account-settings-title">Account Settings</h1>
            <div class="personal-info">Personal Information</div>
            <div class="personal-container">
                <div class="userprofile">
                    <div class="drag-drop-container" id="drag-drop-container">
                        <form asp-action="UploadProfileImageStudent" method="post" enctype="multipart/form-data" id="uploadProfileForm" onsubmit="event.preventDefault(); uploadProfileImage();">
                            <div id="drop-area" ondragover="handleDragOver(event)" ondragleave="handleDragLeave(event)" ondrop="handleDrop(event)">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    @if (ViewData["FilePath"] != null)
                                    {
                                        <img src="@ViewData["FilePath"]" alt="Profile Image" id="dprofile" style="cursor: pointer; width: 200px; height: 200px; border-radius: 50%;" onclick="showProfileOptions()">
                                    }
                                    else
                                    {
                                        <img src="/profile_images/default.png" alt="Profile Image" id="dprofile" style="cursor: pointer; width: 200px; height: 200px; border-radius: 50%;" onclick="showProfileOptions()">
                                    }
                                }
                                <input type="file" id="fileElem" name="profileImage" accept="image/*" onchange="handleFiles(this.files)" style="display: none;">
                            </div>  
                            <button type="submit" class="Upload">Upload Image</button>
                        </form>
                        <div id="gallery"></div>
                    </div>
                </div>

                <form asp-action="RemoveProfileImageStudent" method="post" id="removeProfileForm" style="display: none;">
                    <input type="hidden" name="userId" value="@User.FindFirstValue(ClaimTypes.NameIdentifier)" />
                </form>

                <div id="profileOptions" class="hidden" onclick="hideProfileOptions(event)">
                    <button onclick="viewProfile()">View Profile</button>
                    <button onclick="removeProfile()">Remove Profile</button>
                    <button onclick="document.getElementById('fileElem').click();">Upload New Profile</button>
                </div>

                <div class="userdetails-container">
                    <form asp-action="AccountEditStudent" method="post" id="accountEditForm">
                        <div class="username">
                            <h1>Username</h1>
                            <div class="name">
                                <input asp-for="NewUsername" class="fullname" placeholder="@ViewData["Username"]" oninput="checkInput()" autocomplete="off" disabled />
                                <span asp-validation-for="NewUsername" class="text-danger"></span>
                                <button type="button" class="changepassword" id="changeButton" onclick="toggleUsernameEdit()">Change Username</button>
                                <button type="submit" class="changepassword" id="saveButton" style="display: none;">Save Username</button>
                                <span id="usernameError" class="usernameError"></span>
                            </div>
                        </div>
                        <div class="Email">
                            <h1>Email</h1>
                            <div class="name">
                                <input type="text" class="Newemail" value="@User.FindFirstValue(ClaimTypes.Email)" readonly />
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <div class="personal-info">Security and Privacy</div>

            <div class="personal-container1">
                <div class="description">
                    <h1>Change Password</h1>
                    <p>"Deleting your account will permanently remove all your data and cannot be undone. Please reconsider before proceeding.</p>
                </div>
                <div class="button-container">
                    <button class="changepassword" onclick="location.href='@Url.Action("ChangePassword", "Account")'">Change Password</button>
                </div>
            </div>
            <div class="personal-container2">
                <div class="description">
                    <h1>Delete Account</h1>
                    <p>"Deleting your account will permanently remove all your data and cannot be undone. Please reconsider before proceeding.</p>
                </div>
                <div class="button-container">
                    <div class="Logout">
                        <form asp-action="DeleteAccount" method="post">
                            <button type="submit" class="deleteaccount">Delete Account</button>
                        </form>
                    </div>
                </div>
            </div>

            <div class="Logout1">
                <form asp-action="Logout" method="post">
                    <button type="submit" class="changepassword">Logout</button>
                </form>
            </div>
        </div>
    </div>
</body>

<script>

// Set the selected value of the dropdown based on the current filter period

document.addEventListener('DOMContentLoaded', function () {
    var filterPeriod = '@ViewData["FilterPeriod"]';
    console.log('Filter Period:', filterPeriod); // Debugging line to check the value of filterPeriod
    if (filterPeriod) {
        var filterDropdown = document.getElementById('filterDropdown');
        if (filterDropdown) {
            filterDropdown.value = filterPeriod.toLowerCase().replace(" ", "");
            console.log('Dropdown value set to:', filterDropdown.value); // Debugging line to check the value set in the dropdown
        } else {
            console.error('Filter dropdown element not found');
        }
    } else {
        console.error('Filter period is not set');
    }
});

// Pie Chart 1
const ctx1 = document.getElementById('myPieChart1').getContext('2d');
const myPieChart1 = new Chart(ctx1, {
    type: 'pie',
    data: {
        labels: ['Ai Generated', 'Manual'],
        datasets: [{
            label: 'Generated',
            data: [@ViewData["AiQuizCount"], @ViewData["ManualQuizCount"]],
            backgroundColor: [
                'rgba(58, 183, 26, 1)',
                'rgba(255, 222, 62, 1)',
                'rgba(56, 112, 18, 1)',
                'rgba(255, 207, 4, 1)'
            ],
            borderColor: [
                'rgba(255, 253, 193, 1)',
                'rgba(255, 253, 193, 1)',
                'rgba(255, 253, 193, 1)',
                'rgba(255, 253, 193, 1)'
            ],
            borderWidth: 8
        }]
    },
    options: {
        responsive: true,
        plugins: {
            legend: {
                position: 'bottom',
            },
            tooltip: {
                enabled: true,
            }
        },
    }
});

const ctx2 = document.getElementById('myPieChart2').getContext('2d');
const myPieChart2 = new Chart(ctx2, {
    type: 'pie',
    data: {
        labels: ['Ai Generated', 'Manual'],
        datasets: [{
            label: 'User Count',
            data: [@ViewData["AiFlashcardCount"], @ViewData["ManualFlashcardCount"]],
            backgroundColor: [
                'rgba(58, 183, 26, 1)',
                'rgba(255, 222, 62, 1)',
                'rgba(56, 112, 18, 1)',
                'rgba(255, 207, 4, 1)'
            ],
            borderColor: [
                'rgba(159, 219, 93, 1)',
                'rgba(159, 219, 93, 1)',
                'rgba(159, 219, 93, 1)',
                'rgba(159, 219, 93, 1)'
            ],
            borderWidth: 8
        }]
    },
    options: {
        responsive: true,
        plugins: {
            legend: {
                position: 'bottom',
                labels: {
                    color: 'rgba(43, 85, 14, 1)' // Change legend text color to the specified color
                }
            },
            tooltip: {
                enabled: true,
                bodyColor: 'rgba(43, 85, 14, 1)', // Change tooltip text color to the specified color
                titleColor: 'rgba(43, 85, 14, 1)', // Change tooltip title text color to the specified color
            }
        },
    }
});





// Set the active section based on local storage
document.addEventListener('DOMContentLoaded', function () {
    var activeSection = localStorage.getItem('activeSection') || 'Home';
    showSection(activeSection);
});

function filterData(period) {
    window.location.href = `@Url.Action("ProfessorPanel", "Panels")?period=${period}`;
}





function deleteFlashcard(flashcardId) {
    if (confirm('Are you sure you want to delete this flashcard?')) {
        $.ajax({
            url: '@Url.Action("DeleteFlashcard", "AdminPanel")',
            type: 'POST',
            data: { id: flashcardId },
            success: function(result) {
                alert('Flashcard deleted successfully.');
                // Fade out and remove the flashcard element
                $('#flashcard-' + flashcardId).fadeOut(500, function() {
                    $(this).remove();
                });
            },
            error: function(xhr, status, error) {
                alert('An error occurred while deleting the flashcard: ' + error);
            }
        });
    }
}


function deleteFlashcard(flashcardId) {
    if (confirm('Are you sure you want to delete this flashcard?')) {
        $.ajax({
            url: '@Url.Action("DeleteFlashcard", "Panels")',
            type: 'POST',
            data: { id: flashcardId },
            success: function(result) {
                alert('Flashcard deleted successfully.');
                localStorage.setItem('activeSection', 'ContentManagement');
                // Fade out and remove the flashcard element
                $('#flashcard-' + flashcardId).fadeOut(500, function() {
                    $(this).remove();
                });
            },
            error: function(xhr, status, error) {
                alert('An error occurred while deleting the flashcard: ' + error);
            }
        });
    }

}
</script>
<script>
function showSection(section) {
    var sections = document.querySelectorAll('.section');
    sections.forEach(function (sec) {
        sec.style.display = 'none';
    });
    var selectedSection = document.getElementById(section);
    if (selectedSection.style.display === 'none' || selectedSection.style.display === '') {
        selectedSection.style.display = 'block';
    } else {
        selectedSection.style.display = 'block';
    }
    localStorage.setItem('activeSection', section);

    // Automatically open the "Quizzes" tab when the Content Management section is shown
    if (section === 'ContentManagement') {
        openTab(null, 'Quizzes');
    }
}

// Set the active section based on local storage
document.addEventListener('DOMContentLoaded', function () {
    var activeSection = localStorage.getItem('activeSection') || 'Home';
    showSection(activeSection);
});

function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    if (evt) {
        evt.currentTarget.className += " active";
    } else {
        document.querySelector('.tablinks').classList.add('active');
    }
}
</script>

<script>
function takeFlashcard(flashcardId) {
    // Redirect to the flashcard study mode URL
    const url = `/FlashCards/FlashCardStudyMode/${flashcardId}`;
    window.location.href = url;
}</script>
<script>
function handleDragOver(event) {
    event.preventDefault(); // Prevent default to allow drop
    event.stopPropagation();
    document.getElementById('drop-area').classList.add('highlight');
}

function handleDragLeave(event) {
    event.preventDefault();
    event.stopPropagation();
    document.getElementById('drop-area').classList.remove('highlight');
}

function handleDrop(event) {
    event.preventDefault();
    event.stopPropagation();
    document.getElementById('drop-area').classList.remove('highlight');
    const files = event.dataTransfer.files;
    if (files.length) {
        document.getElementById('fileElem').files = files; // Assign the dropped files to the input
        handleFiles(files); // Preview the file
    }
}

function handleFiles(files) {
    files = [...files];
    previewFile(files[0]);
}

function previewFile(file) {
    let reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onloadend = function () {
        let img = document.createElement('img');
        img.src = reader.result;
        img.classList.add('uploaded-image');
        document.querySelector('.Upload').style.display = 'block';
        let gallery = document.getElementById('gallery');
        gallery.innerHTML = ''; // Clear any existing images
        gallery.appendChild(img); // Hide the drop area when an image is previewed
        document.getElementById('drop-area').style.display = 'none';
    };
}

function checkInput() {
    var input = document.querySelector('input[name="NewUsername"]').value;
    var button = document.getElementById('saveButton');
    var errorMessage = document.getElementById('usernameError');
    if (input.trim() === "") {
        button.disabled = true;
        errorMessage.style.display = 'block';
        errorMessage.textContent = 'Username cannot be empty.';
    } else if (input.length < 2) {
        button.disabled = true;
        errorMessage.style.display = 'block';
        errorMessage.textContent = 'Username must be at least 2 characters long.';
    } else {
        button.disabled = false;
        errorMessage.style.display = 'none';
    }
}

function showProfileOptions() {
    var options = document.getElementById('profileOptions');
    options.classList.toggle('hidden');
}

function hideProfileOptions(event) {
    event.stopPropagation();
    var options = document.getElementById('profileOptions');
    options.classList.add('hidden');
}

document.addEventListener('click', function(event) {
    var options = document.getElementById('profileOptions');
    var profileImage = document.getElementById('dprofile');
    if (!options.contains(event.target) && event.target !== profileImage) {
        options.classList.add('hidden');
    }
});

function viewProfile() {
    var imgSrc = document.getElementById('dprofile').src;
    window.open(imgSrc, '_blank');
    hideProfileOptions(event);
}

function removeProfile() {
    $.ajax({
        url: '@Url.Action("RemoveProfileImageStudent", "Account")',
        type: 'POST',
        data: $('#removeProfileForm').serialize(),
        success: function () {
            // Reload the page with the AccountSettings section
            const url = new URL(window.location);
            url.searchParams.set('section', 'AccountSettings');
            window.location.href = url.toString();
        },
        error: function () {
            alert('An error occurred while removing the profile image.');
        }
    });
    hideProfileOptions(event);
}

function uploadProfileImage() {
    var formData = new FormData($('#uploadProfileForm')[0]);
    $.ajax({
        url: '@Url.Action("UploadProfileImageStudent", "Account")',
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function () {
            // Reload the page with the AccountSettings section
            const url = new URL(window.location);
            url.searchParams.set('section', 'AccountSettings');
            window.location.href = url.toString();
        },
        error: function () {
            alert('An error occurred while uploading the profile image.');
        }
    });
}

function toggleUsernameEdit() {
    var input = document.querySelector('input[name="NewUsername"]');
    var changeButton = document.getElementById('changeButton');
    var saveButton = document.getElementById('saveButton');
    if (input.disabled) {
        input.disabled = false;
        input.value = ''; // Clear the input field
        input.focus(); // Automatically focus on the input field
        changeButton.style.display = 'none';
        saveButton.style.display = 'inline-block';
    } else {
        input.disabled = true;
        changeButton.style.display = 'inline-block';
        saveButton.style.display = 'none';
    }
}

document.getElementById('accountEditForm').addEventListener('submit', function(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    const url = new URL(form.action);
    url.searchParams.set('section', 'AccountSettings');
    console.log('Submitting form to:', url.toString());
    console.log('Form data:', formData);
    $.ajax({
        url: url.toString(),
        type: 'POST',
        data: formData,
        contentType: false,
        processData: false,
        success: function (response) {
            console.log('Form submission successful');
            // Reload the page to reflect changes
            window.location.reload();
        },
        error: function (xhr, status, error) {
            console.error('Form submission error:', status, error);
            alert('An error occurred while updating the username.');
        }
    });
});
</script>
</html>

