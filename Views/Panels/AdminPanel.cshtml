@model UsersApp.ViewModels.AccountEditViewModel

@{
    ViewData["Title"] = "Admin Panel";
    Layout = "~/Views/Shared/_PanelLayout.cshtml";
}
<html>
<head>
    <link rel="stylesheet" href="~/css/Global/Header.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/AccountEdit.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/reports.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/AdminPanel.css" asp-append-version="true" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Rum+Raisin&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="SideBar">
        <button class="HomeButton" onclick="showSection('Home')"><img src="../Assets/AccountEdit/bahay.png">Home</button>
        @if((string)@ViewData["Role"] == "Admin")
        {
            <button class="QuizButton" onclick="showSection('ContentManagement')"><img src="../Assets/AccountEdit/folder 1.png">Content Management</button>
            <button class="LogoutButton" onclick="document.getElementById('logoutForm').submit()">
                <img src="../Assets/logout.png" style="width: 60px; height: 60px;">Logout
            </button>
            <form id="logoutForm" asp-action="Logout" method="post" style="display: none;"></form>
        }
    </div>
    
    <div class="Content">
    <div class="print-container">
        <div class="Home section" id="Home" style="display: block;">
        @if ((string)@ViewData["Role"] == "Admin")
        {
            <h1 class="report-titles">Overall Content Report</h1>
            <p class="report-description">Overview of Quizzes and FlashCards created on Brain Burst</p>
            
            <div class="filter-container">
                <select id="filterDropdown" class="filter-dropdown" onchange="filterData(this.value)">
                    <option value="all">All</option>
                    <option value="today">Today</option>
                    <option value="thismonth">This Month</option>
                    <option value="thisyear">This Year</option>
                </select>
            </div>

            <div class="top-chart-container">
                <div>
                    <div class="box-pie-chart">
                        <canvas id="myPieChart1" width="220" height="240"></canvas>
                    </div>
                    <p class="report-note">Quizzes and Flashcards Count</p>
                </div>

                <div class="box-reports">
                    <div class="topper">
                        <div class="left">
                            <h1>Quizzes</h1>
                            <div class="number-of-quiz">
                                AI Generated Quizzes: @ViewData["AiQuizCount"]
                            </div>
                            <div class="number-of-flashcards">
                                Manually Created Quizzes: @ViewData["ManualQuizCount"]
                            </div>
                        </div>
                        <div class="right">
                            <h1>Flashcards</h1>
                            <div class="number-of-quiz">
                                AI Generated FlashCards: @ViewData["AiFlashcardCount"]
                            </div>
                            <div class="number-of-flashcards">
                                Manually Created FlashCards: @ViewData["ManualFlashcardCount"]
                            </div>
                        </div>
                    </div>
                    <div class="content-created">
                        Total Number of Quiz and Flashcards Created/Generated: @ViewData["TotalContents"]
                    </div>
                </div>
            </div>

            <h1 class="report-titles" id="margin-top-text">User Report</h1>
            <p class="report-description">Overview of users and their activities on BrainBurst</p>

            <div class="mid-chart-container">
                <div class="left-box-report">
                    <div class="quizzes-average">
                        <h1>Average Quizzes Created @ViewData["FilterPeriod"]</h1>
                        <p>@ViewData["AverageQuizzesPerMonth"]</p>
                    </div>
                    <div class="quizzes-average">
                        <h1>Average Flashcards Created @ViewData["FilterPeriod"]</h1>
                        <p>@ViewData["AverageFlashcardsPerMonth"]</p>
                    </div>
                </div>
                <div class="right-box-report">
                    <div class="left-right-box-report">
                        <div class="population-report">
                            <h1>Total Number of Users:</h1>
                            <p>@ViewData["TotalUserCount"]</p>
                        </div>
                        <div class="population-report">
                            <h1>Total Number of Students:</h1>
                            <p>@ViewData["StudentCount"]</p>
                        </div>
                        <div class="population-report">
                            <h1>Total Number of Professors:</h1>
                            <p>@ViewData["ProfessorCount"]</p>
                        </div>
                    </div>
                    <div class="right-right-box-report">
                        <canvas id="myPieChart2"></canvas>
                        <p class="role-description">Users by role</p>
                    </div>
                </div>
            </div>
            
            <h1 class="report-titles" id="margin-top-text">Feedback Analysis Report</h1>
            <p class="report-description">Overview of user feedback on BrainBurst</p>

            <div class="bottom-chart-container">
                <div class="first-chart-bottom">
                    <div class="average-content-rating">
                        <p>Total Student Reviews: </p>
                        <h1>@Model.StudentRatings?.Count</h1>
                    </div>
                    <div class="average-content-rating">
                        <p>Total Professor Reviews: </p>
                        <h1>@Model.ProfessorRatings?.Count</h1>
                    </div>
                </div>
                <div class="second-chart-bottom">
                    <div class="box-chart-bottom">
                        <canvas id="myPieChart3"></canvas>
                    </div>
                    <p>Student Ratings</p>
                </div>
                <div class="third-chart-bottom">
                    <div class="box-chart-bottom">
                        <canvas id="myPieChart4"></canvas>
                    </div>
                    <p>Professor Ratings</p>
                </div>
            </div>
        }
                <button onclick="window.print();" class="print-button">Print</button>
        </div>
        
    </div>


        <div asp-validation-summary="All" class="text-danger"></div>

        <div class="ContentManagement section" id="ContentManagement" style="display: none;">
            <div class="tab">
            <button class="tablinks" onclick="openTab(event, 'Quizzes')">Quizzes</button>
            <button class="tablinks" onclick="openTab(event, 'Flashcards')">Flashcards</button>
            </div>
            <div class="line"></div>

            <div id="Quizzes" class="tabcontent" style="display: none;">
                <div class="Q-Head">
                    <h1>Quizzes</h1>
                </div>
                <div class="quizzes-container">
                    @foreach (var quiz in Model.Quizzes)
                    {
                        <div id="quiz-@quiz.QuizId" class="flashcard-item">
                            <h1>@quiz.Topic</h1>
                            <h2>@quiz.GradeLevel</h2>
                            <div class="buttons-container">
                                <button class="view-btn" onclick="location.href='@Url.Action("ViewQuizDetails", "QuizCreation", new { id = quiz.QuizId })'">View</button>
                                <button class="delete-btn" onclick="deleteQuiz(@quiz.QuizId)">Delete</button>
                            </div>
                        </div>
                    }
                </div>
            </div>

        <div class="f-content">
     <div id="Flashcards" class="tabcontent">
                <div class="f-head">
                    <h1>Flashcards</h1>
                </div>
                <div class="f-collection">
                    @if (Model.Flashcards != null && Model.Flashcards.Any())
                    {
                        @foreach (var flashcard in Model.Flashcards)
                        {
                            <div id="flashcard-@flashcard.Id" class="flashcard-item" data-title="@flashcard.Title.ToLower()" onclick="takeFlashcard(@flashcard.Id)">
                                <div class="f-info">
                                    <p>@flashcard.Id</p>
                                    <h2>@flashcard.Title</h2>
                                    <h2>@flashcard.Questions.Count Items</h2>
                                </div>
                                <div class="bot">
                                    <div class="divider"></div>
                                    <div class="f-desc">@flashcard.Description</div>
                                </div>
                                <div class="buttons-container">
                                    <button class="view-btn" onclick="takeFlashcard(@flashcard.Id)">View</button>
                                    <button class="delete-btn" onclick="event.stopPropagation(); deleteFlashcard(@flashcard.Id)">Delete</button>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        </div>
          
<script>
    document.addEventListener('DOMContentLoaded', function () {
    var filterPeriod = '@ViewData["FilterPeriod"]';
    console.log('Filter Period:', filterPeriod); // Debugging line to check the value of filterPeriod
    if (filterPeriod) {
        var filterDropdown = document.getElementById('filterDropdown');
        if (filterDropdown) {
            filterDropdown.value = filterPeriod.toLowerCase().replace(" ", "");
            console.log('Dropdown value set to:', filterDropdown.value); // Debugging line to check the value set in the dropdown
        } else {
            console.error('Filter dropdown element not found');
        }
    } else {
        console.error('Filter period is not set');
    }
});

// Pie Chart 1
const ctx1 = document.getElementById('myPieChart1').getContext('2d');
const myPieChart1 = new Chart(ctx1, {
    type: 'pie',
    data: {
        labels: ['Quiz Count', 'FlashCard Count'],
        datasets: [{
            label: 'Generated',
            data: [@ViewData["TotalQuizCount"], @ViewData["TotalFlashcardCount"]],
            backgroundColor: [
                'rgba(58, 183, 26, 1)',
                'rgba(255, 222, 62, 1)',
                'rgba(56, 112, 18, 1)',
                'rgba(255, 207, 4, 1)'
            ],
            borderColor: [
                'rgba(255, 253, 193, 1)',
                'rgba(255, 253, 193, 1)',
                'rgba(255, 253, 193, 1)',
                'rgba(255, 253, 193, 1)'
            ],
            borderWidth: 8
        }]
    },
    options: {
        responsive: true,
        plugins: {
            legend: {
                position: 'bottom',
            },
            tooltip: {
                enabled: true,
            }
        },
    }
});

const ctx2 = document.getElementById('myPieChart2').getContext('2d');
const myPieChart2 = new Chart(ctx2, {
    type: 'pie',
    data: {
        labels: ['Professor', 'Student'],
        datasets: [{
            label: 'User Count',
            data: [@ViewData["ProfessorCount"], @ViewData["StudentCount"]],
            backgroundColor: [
                'rgba(58, 183, 26, 1)',
                'rgba(255, 222, 62, 1)',
                'rgba(56, 112, 18, 1)',
                'rgba(255, 207, 4, 1)'
            ],
            borderColor: [
                'rgba(159, 219, 93, 1)',
                'rgba(159, 219, 93, 1)',
                'rgba(159, 219, 93, 1)',
                'rgba(159, 219, 93, 1)'
            ],
            borderWidth: 8
        }]
    },
    options: {
        responsive: true,
        plugins: {
            legend: {
                position: 'bottom',
                labels: {
                    color: 'rgba(43, 85, 14, 1)' // Change legend text color to the specified color
                }
            },
            tooltip: {
                enabled: true,
                bodyColor: 'rgba(43, 85, 14, 1)', // Change tooltip text color to the specified color
                titleColor: 'rgba(43, 85, 14, 1)', // Change tooltip title text color to the specified color
            }
        },
    }
});

function renderRatingsChart(chartId, ratings) {
    const ctx = document.getElementById(chartId).getContext('2d');
    return new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['1 Star', '2 Stars', '3 Stars', '4 Stars', '5 Stars'],
            datasets: [{
                data: ratings,
                backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
            }]
        }
    });
}

document.addEventListener('DOMContentLoaded', function () {
    var studentRatings = @Html.Raw(Json.Serialize(Model.StudentRatings.GroupBy(r => r.Rating).Select(g => g.Count())));
    var professorRatings = @Html.Raw(Json.Serialize(Model.ProfessorRatings.GroupBy(r => r.Rating).Select(g => g.Count())));

    renderRatingsChart('myPieChart3', studentRatings);
    renderRatingsChart('myPieChart4', professorRatings);
});



// Set the active section based on local storage
document.addEventListener('DOMContentLoaded', function () {
    var activeSection = localStorage.getItem('activeSection') || 'Home';
    showSection(activeSection);
});

function filterData(period) {
    window.location.href = `@Url.Action("AdminPanel", "Panels")?period=${period}`;
}


function deleteQuiz(quizId) {
    if (confirm('Are you sure you want to delete this quiz?')) {
        $.ajax({
            url: '@Url.Action("DeleteQuiz", "Panels")',
            type: 'POST',
            data: { id: quizId },
            success: function(result) {
                alert('Quiz deleted successfully.');
                localStorage.setItem('activeSection', 'ContentManagement');
                // Fade out and remove the quiz element
                $('#quiz-' + quizId).fadeOut(500, function() {
                    $(this).remove();
                });
            },
            error: function(xhr, status, error) {
                alert('An error occurred while deleting the quiz: ' + error);
            }
        });
    }
}


function deleteFlashcard(flashcardId) {
    if (confirm('Are you sure you want to delete this flashcard?')) {
        $.ajax({
            url: '@Url.Action("DeleteFlashcard", "Panels")',
            type: 'POST',
            data: { id: flashcardId },
            success: function(result) {
                alert('Flashcard deleted successfully.');
                localStorage.setItem('activeSection', 'ContentManagement');
                // Fade out and remove the flashcard element
                $('#flashcard-' + flashcardId).fadeOut(500, function() {
                    $(this).remove();
                });
            },
            error: function(xhr, status, error) {
                alert('An error occurred while deleting the flashcard: ' + error);
            }
        });
    }

}
</script>
<script>
function showSection(section) {
    var sections = document.querySelectorAll('.section');
    sections.forEach(function (sec) {
        sec.style.display = 'none';
    });
    var selectedSection = document.getElementById(section);
    if (selectedSection.style.display === 'none' || selectedSection.style.display === '') {
        selectedSection.style.display = 'block';
    } else {
        selectedSection.style.display = 'block';
    }
    localStorage.setItem('activeSection', section);

    // Automatically open the "Quizzes" tab when the Content Management section is shown
    if (section === 'ContentManagement') {
        openTab(null, 'Quizzes');
    }
}

// Set the active section based on local storage
document.addEventListener('DOMContentLoaded', function () {
    var activeSection = localStorage.getItem('activeSection') || 'Home';
    showSection(activeSection);
});

function openTab(evt, tabName) {
    var i, tabcontent, tablinks;
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
    }
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
    }
    document.getElementById(tabName).style.display = "block";
    if (evt) {
        evt.currentTarget.className += " active";
    } else {
        document.querySelector('.tablinks').classList.add('active');
    }
}
</script>

<script>
function takeFlashcard(flashcardId) {
    // Redirect to the flashcard study mode URL
    const url = `/FlashCards/FlashCardStudyMode/${flashcardId}`;
    window.location.href = url;
}</script>

</body>
</html>