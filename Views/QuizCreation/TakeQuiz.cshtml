@model UsersApp.ViewModels.QuizDetailsViewModel

@using System.Text.Json

@{
    ViewData["Title"] = "Take Quiz";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}

<html>
<head>
    <link rel="stylesheet" href="~/css/Global/Header.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/TakeQuiz.css" asp-append-version="true" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            // Serialize model data for JavaScript use
            let quizId = @Html.Raw(JsonSerializer.Serialize(Model.QuizId));
            let timers = @Html.Raw(JsonSerializer.Serialize(Model.Timer ?? new Dictionary<int, int>()));
            let questions = @Html.Raw(JsonSerializer.Serialize(Model.Questions));
            let choices = @Html.Raw(JsonSerializer.Serialize(Model.Choices));
            let correctAnswers = @Html.Raw(JsonSerializer.Serialize(Model.CorrectAnswers ?? new Dictionary<int, int>()));
            
            console.log("Quiz ID:", quizId);
            console.log("Timers:", timers);
            console.log("Questions:", questions);
            console.log("Choices:", choices);
            console.log("Correct Answers:", correctAnswers);

            let currentQuestionIndex = 0;
            let timer;
            let score = 0;

            function showQuestion(index) {
                if (index >= Object.keys(questions).length) {
                    $('#quiz-container').html(`<strong>Quiz Completed! Your score: ${score}/${Object.keys(questions).length}</strong>`);
                    return;
                }

                // Display the current question
                $('#question').text(questions[index + 1]); // Questions use 1-based indexing

                // Render choices for the question
                $('#choices').empty();
                choices[index + 1].forEach((choice, i) => {
                    $('#choices').append(`<button class="choice" data-index="${i}">${choice}</button>`);
                });

                // Start the timer for the current question
                startTimer(timers[index + 1] || 0.1667); // Default to 10 seconds if no timer is specified
            }

            function startTimer(minutes) {
                clearInterval(timer);
                let timeLeft = minutes * 60; // Convert minutes to seconds
                timer = setInterval(() => {
                    timeLeft--;
                    $('#timer').text(`Time left: ${timeLeft} secs`);
                    if (timeLeft <= 0) {
                        clearInterval(timer);
                        showQuestion(++currentQuestionIndex); // Move to the next question
                    }
                }, 1000);
            }

            // Handle choice selection
            $(document).on('click', '.choice', function() {
                let selectedChoiceIndex = $(this).data('index');
                console.log(`Selected choice index: ${selectedChoiceIndex}`);

                // Check if the selected choice is correct
                let correctChoiceIndex = correctAnswers[currentQuestionIndex + 1];
                if (selectedChoiceIndex === correctChoiceIndex) {
                    $(this).css('background-color', 'green');
                    score++;
                } else {
                    $(this).css('background-color', 'red');
                }

                // Move to the next question after a short delay
                setTimeout(() => {
                    showQuestion(++currentQuestionIndex);
                }, 1000);
            });

            // Display the first question on page load
            showQuestion(currentQuestionIndex);
        });
    </script>
</head>
<body>
    <div id="quiz-container">
        <div id="timer"></div>
        <div id="question"></div>
        <div id="choices"></div>
    </div>
</body>

<script>
    // Show alert before the page loads
    window.onload = function() {
        alert('There is an anti-cheat on this webpage. Minimizing or changing tabs 3 times will refresh the page.');
    };

    let tabChangeCount = 0;
    let hidden, visibilityChange; 

    if (typeof document.hidden !== "undefined") {
        hidden = "hidden";
        visibilityChange = "visibilitychange";
    } else if (typeof document.msHidden !== "undefined") {
        hidden = "msHidden";
        visibilityChange = "msvisibilitychange";
    } else if (typeof document.webkitHidden !== "undefined") {
        hidden = "webkitHidden";
        visibilityChange = "webkitvisibilitychange";
    }

    function playBeep() {
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioCtx.createOscillator();
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // 440 Hz is the frequency of the beep
        oscillator.connect(audioCtx.destination);
        oscillator.start();
        oscillator.stop(audioCtx.currentTime + 1); // Beep duration is 0.1 seconds
    }

    function handleVisibilityChange() {
        if (document[hidden]) {
            tabChangeCount++;
            playBeep();
            if (tabChangeCount >= 3) {
                location.reload();
            }
        }
    }

    document.addEventListener(visibilityChange, handleVisibilityChange, false);
</script>
</html>