@model UsersApp.ViewModels.QuizDetailsViewModel

@using System.Text.Json

@{
    ViewData["Title"] = "Take Quiz";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}

<html>
<head>
    <link rel="stylesheet" href="~/css/Global/Header.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/TakeQuiz.css" asp-append-version="true" />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        #popup-message {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.8);
    color: white;
    padding: 20px 40px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    text-align: center;
    font-size: 18px;
    z-index: 1000;
    opacity: 0;
    transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
}

#popup-message.show {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
}

#popup-message.hidden {
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.8);
}

        .scores-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .scores-table th, .scores-table td {
            border: 1px solid #ddd;
            padding: 8px;
        }

        .scores-table th {
            background-color: #f2f2f2;
            text-align: left;
        }

        .scores-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .scores-table tr:hover {
            background-color: #ddd;
        }

        .scores-table th {
            padding-top: 12px;
            padding-bottom: 12px;
            background-color: #4CAF50;
            color: white;
        }
    </style>
    <script>
        $(document).ready(function() {
            // Serialize model data for JavaScript use
            let quizId = @Html.Raw(JsonSerializer.Serialize(Model.QuizId));
            let timers = @Html.Raw(JsonSerializer.Serialize(Model.Timer ?? new Dictionary<int, int>()));
            let questions = @Html.Raw(JsonSerializer.Serialize(Model.Questions));
            let choices = @Html.Raw(JsonSerializer.Serialize(Model.Choices));
            let correctAnswers = @Html.Raw(JsonSerializer.Serialize(Model.CorrectAnswers ?? new Dictionary<int, int>()));
            
            console.log("Quiz ID:", quizId);
            console.log("Timers:", timers);
            console.log("Questions:", questions);
            console.log("Choices:", choices);
            console.log("Correct Answers:", correctAnswers);

            let currentQuestionIndex = 0;
            let timer;
            let score = 0;

            function showQuestion(index) {
                if (index >= Object.keys(questions).length) {
                    $('#quiz-container').html(`
                        <strong>Quiz Completed! Your score: ${score}/${Object.keys(questions).length}</strong>
                        <button id="retake-quiz" class="btn">Retake Quiz</button>
                        <button id="create-quiz" class="btn">Create Another Quiz</button>
                    `);
                    submitScore(score);
                    fetchScores();

                    // Add event listeners for the new buttons
                    $('#retake-quiz').click(function() {
                        location.reload(); // Reload the page to retake the quiz
                    });
                    $('#create-quiz').click(function() {
                        window.location.href = '@Url.Action("Quiz_Creation_Ai", "QuizCreation")'; // Redirect to quiz creation page
                    });

                    return;
                }

                // Display the current question
                $('#question').text(questions[index + 1]); // Questions use 1-based indexing

                // Render choices for the question
                $('#choices').empty();
                choices[index + 1].forEach((choice, i) => {
                    $('#choices').append(`<button class="choice" data-index="${i}">${choice}</button>`);
                });

                // Start the timer for the current question
                startTimer(timers[index + 1] || 10); // Default to 10 seconds if no timer is specified
            }

            function startTimer(seconds) {
                clearInterval(timer);
                let timeLeft = seconds;
                timer = setInterval(() => {
                    timeLeft--;
                    $('#timer').text(`Time left: ${timeLeft} secs`);
                    if (timeLeft <= 0) {
                        clearInterval(timer);
                        playBeep();
                        alert('Times Up!');
                        showQuestion(++currentQuestionIndex); // Move to the next question
                    }
                }, 1000);
            }

            // Handle choice selection
            $(document).on('click', '.choice', function() {
                let selectedChoiceIndex = $(this).data('index');
                console.log(`Selected choice index: ${selectedChoiceIndex}`);

                // Check if the selected choice is correct
                let correctChoiceIndex = correctAnswers[currentQuestionIndex + 1];
                if (selectedChoiceIndex === correctChoiceIndex) {
                    $(this).css('background-color', 'green');
                    score++;
                } else {
                    $(this).css('background-color', 'red');
                }

                // Move to the next question after a short delay
                setTimeout(() => {
                    showQuestion(++currentQuestionIndex);
                }, 1000);
            });

            // Display the first question on page load
            showQuestion(currentQuestionIndex);

            // Function to submit the score to the server
            function submitScore(score) {
                $.ajax({
                    url: '/QuizCreation/SubmitScore',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ quizId: quizId, score: score }),
                    success: function(response) {
                        console.log("Score submitted successfully:", response);
                    },
                    error: function(error) {
                        console.error("Error submitting score:", error);
                    }
                });
            }

            // Function to fetch and display the scores of users who have taken the quiz
            function fetchScores() {
                $.ajax({
                    url: `/QuizCreation/GetQuizScores?quizId=${quizId}`,
                    type: 'GET',
                    success: function(scores) {
                        console.log("Scores fetched successfully:", scores);
                        displayScores(scores);
                    },
                    error: function(error) {
                        console.error("Error fetching scores:", error);
                    }
                });
            }

            // Function to display the scores
            function displayScores(scores) {
                let scoresHtml = `
                    <h3>Scores of Users Who Have Taken This Quiz:</h3>
                    <table class="scores-table">
                        <thead>
                            <tr>
                                <th>User</th>
                                <th>Score</th>
                                <th>Date</th>
                            </tr>
                        </thead>
                        <tbody>
                `;
                scores.forEach(score => {
                    scoresHtml += `
                        <tr>
                            <td>${score.fullName}</td>
                            <td>${score.score}</td>
                            <td>${new Date(score.submissionDate).toLocaleString()}</td>
                        </tr>
                    `;
                });
                scoresHtml += `
                        </tbody>
                    </table>
                `;
                $('#quiz-container').append(scoresHtml);
            }
        });
    </script>
</head>
<body>
    <div id="quiz-container">
        <div id="timer"></div>
        <div id="popup-message" class="hidden">Time is up! Moving to the next question...</div>
        <div id="question"></div>
        <div id="choices"></div>
    </div>
</body>

<script>
    // Show alert before the page loads
    window.onload = function() {
        alert('There is an anti-cheat on this webpage. Minimizing or changing tabs 3 times will refresh the page.');
    };

    let tabChangeCount = 0;
    let hidden, visibilityChange; 

    if (typeof document.hidden !== "undefined") {
        hidden = "hidden";
        visibilityChange = "visibilitychange";
    } else if (typeof document.msHidden !== "undefined") {
        hidden = "msHidden";
        visibilityChange = "msvisibilitychange";
    } else if (typeof document.webkitHidden !== "undefined") {
        hidden = "webkitHidden";
        visibilityChange = "webkitvisibilitychange";
    }

    function playBeep() {
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioCtx.createOscillator();
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // 440 Hz is the frequency of the beep
        oscillator.connect(audioCtx.destination);
        oscillator.start();
        oscillator.stop(audioCtx.currentTime + 1); // Beep duration is 1 second
    }

    function playBeep2() {
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioCtx.createOscillator();
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(600, audioCtx.currentTime); // 440 Hz is the frequency of the beep
        oscillator.connect(audioCtx.destination);
        oscillator.start();
        oscillator.stop(audioCtx.currentTime + .1); // Beep duration is 1 second
    }

    function playBeep3() {
        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioCtx.createOscillator();
        oscillator.type = 'sine';
        oscillator.frequency.setValueAtTime(600, audioCtx.currentTime); // 440 Hz is the frequency of the beep
        oscillator.connect(audioCtx.destination);
        oscillator.start();
        oscillator.stop(audioCtx.currentTime + 1); // Beep duration is 1 second
    }

    function handleVisibilityChange() {
        if (document[hidden]) {
            tabChangeCount++;
            playBeep();
            if (tabChangeCount >= 3) {
                location.reload();
            }
        }
    }

    document.addEventListener(visibilityChange, handleVisibilityChange, false);
</script>
</html>