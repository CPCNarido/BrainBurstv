@model UsersApp.ViewModels.AccountEditViewModel

@{
    ViewData["Title"] = "Flashcard Maker Manual";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}
<html>
<head>
    <link rel="stylesheet" href="~/css/Global/Header.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/AccountEdit.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/reports.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/StudentDashboard.css" asp-append-version="true" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Rum+Raisin&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <div class="SideBar">
        <button class="HomeButton" onclick="showSection('Home')"><img src="../Assets/AccountEdit/bahay.png">Home</button>
        @if((string)@ViewData["Role"] == "Admin")
        {
            <button class="QuizButton" onclick="showSection('ContentManagement')"><img src="../Assets/AccountEdit/folder 1.png">Content Management</button>
        }

        @if((string)@ViewData["Role"] != "Admin")
        {
        <button class="FlashcardsButton" onclick="showSection('Flashcards')"><img src="../Assets/AccountEdit/3.png">Flashcards</button>
        <button class="QuizButton" onclick="showSection('Quiz')"><img src="../Assets/AccountEdit/utak 1.png">Quiz</button>
        <button class="QuizButton" onclick="showSection('AccountSettings')"><img src="../Assets/AccountEdit/setings.png" class="ads">Account Settings</button>
        }



        
        

    </div>

    <div class="Content">
        <div class="Home section" id="Home" style="display: block;">
        @if ((string)@ViewData["Role"] == "Admin")
        {
            <h1 class="report-titles"> Overall Content Report</h1>
            <p class="report-description">Overview of Quizzes and FlashCards created on Brain Burst</p>
            
            <div class="filter-container">
                <button class="filter-button" onclick="showReport('daily')">Daily</button>
                <button class="filter-button" onclick="showReport('monthly')">Monthly</button>
                <button class="filter-button" onclick="showReport('yearly')">Yearly</button>
            </div>

            <div id="reportContent">
                @await Html.PartialAsync("_DailyReport")
            </div>
        }
        else if((string)@ViewData["Role"] == "Professor"){
            <h1 class="quiz-report-titles"> Quiz Report</h1>
                <p class="quiz-report-description">Overview of Quiz, Manual and AI</p>

                <div class="quiz-top-chart-container">
                    <div>
                        <div class="quiz-box-pie-chart">
                            <canvas id="myPieChart7" width="220" height="240"></canvas>
                        </div>
                        <p class="quiz-report-note"> AI Generated vs Manually Created</p>
                    </div>

                    <div class="quiz-box-reports">
                        <div class="sp">
                            <div class="l">
                                <div class="number-of-quiz">
                                    <h1>AI Generated Quizzes</h1>
                                    @Model.AiQuizCount
                                </div>
                            </div>
                            <div class="r">
                                <div class="number-of-quiz">
                                    <h1>Manual Generated Quizzes</h1>
                                    @Model.ManualQuizCount
                                    @* AI Generated FlashCard: @ViewData["aiFlashcardCount"] *@
                                </div>
                                <div class="number-of-flashcards">
                                    @* Manually Created FlashCard: @ViewData["manualFlashcardCount"] *@
                                </div>
                            </div>
                        </div>
                        <div class="content-created">
                            Total Number of Quiz Created: @ViewData["TotalContentCount"] Contents
                        </div>
                    </div>
                </div>

                <h1 class="flashcards-report-titles"> Flashcards Report</h1>
                <p class="flashcards-report-description">Overview of Flashcards, Manual and AI</p>

                <div class="flashcards-top-chart-container">
                    <div>
                        <div class="flashcards-box-pie-chart">
                            <canvas id="myPieChart8" width="220" height="240"></canvas>
                        </div>
                        <p class="flashcards-report-note"> AI Generated vs Manually Created</p>
                    </div>

                    <div class="flashcards-box-reports">
                        <div class="sp">
                            <div class="l">
                                <div class="number-of-quiz">
                                    <h1>AI Generated Flashcards</h1>
                                    @Model.AiQuizCount
                                </div>
                            </div>
                            <div class="r">
                                <div class="number-of-quiz">
                                    <h1>Manual Generated Flashcards</h1>
                                    @Model.ManualQuizCount
                                    @* AI Generated FlashCard: @ViewData["aiFlashcardCount"] *@
                                </div>
                                <div class="number-of-flashcards">
                                    @* Manually Created FlashCard: @ViewData["manualFlashcardCount"] *@
                                </div>
                            </div>
                        </div>
                        <div class="content-created">
                            Total Number of Flashcards: @ViewData["TotalContentCount"] Contents
                        </div>
                    </div>
                </div>

                <div class="quiz-results">
                    Quiz Results
                </div>
                <table class="results-table">
                    <thead>
                        <tr>
                            <th>Quiz Name</th>
                            <th>Score</th>
                            <th>Date Taken</th>
                            <th>View</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in (List<UsersApp.Models.ScoreRecord>)ViewData["QuizResults"])
                        {
                            <tr>
                                <td>
                                    <div class="results-quiz" onclick="showSection('Quiz')">
                                        @result.Quiz.Topic
                                    </div>
                                </td> 
                                <td>@result.Score</td>
                                <td>@result.SubmissionDate.ToString("MM/dd/yyyy")</td>
                                <td>
                                    <button onclick="location.href='@Url.Action("ViewQuizResult", "Quiz", new { id = result.QuizId })'">View</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
        }
        else if((string)@ViewData["Role"] == "Student"){
            <h1 class="quiz-report-titles"> Quiz Report</h1>
                <p class="quiz-report-description">Overview of Quiz, Manual and AI</p>

                <div class="quiz-top-chart-container">
                    <div>
                        <div class="quiz-box-pie-chart8">
                            <canvas id="myPieChart5" width="220" height="240"></canvas>
                        </div>
                        <p class="quiz-report-note"> AI Generated vs Manually Created</p>
                    </div>

                    <div class="quiz-box-reports">
                        <div class="sp">
                            <div class="l">
                                <div class="number-of-quiz">
                                    <h1>AI Generated Quizzes</h1>
                                    @Model.AiQuizCount
                                </div>
                            </div>
                            <div class="r">
                                <div class="number-of-quiz">
                                    <h1>Manual Generated Quizzes</h1>
                                    @Model.ManualQuizCount
                                    @* AI Generated FlashCard: @ViewData["aiFlashcardCount"] *@
                                </div>
                                <div class="number-of-flashcards">
                                    @* Manually Created FlashCard: @ViewData["manualFlashcardCount"] *@
                                </div>
                            </div>
                        </div>
                        <div class="content-created">
                            Total Number of Quiz Taken: @ViewData["TotalContentCount"] Contents
                        </div>
                    </div>
                </div>

                <h1 class="flashcards-report-titles"> Flashcards Report</h1>
                <p class="flashcards-report-description">Overview of Flashcards, Manual and AI</p>

                <div class="flashcards-top-chart-container">
                    <div>
                        <div class="flashcards-box-pie-chart">
                            <canvas id="myPieChart6" width="220" height="240"></canvas>
                        </div>
                        <p class="flashcards-report-note"> AI Generated vs Manually Created</p>
                    </div>

                    <div class="flashcards-box-reports">
                        <div class="sp">
                            <div class="l">
                                <div class="number-of-quiz">
                                    <h1>AI Generated Flashcards</h1>
                                    @Model.AiQuizCount
                                </div>
                            </div>
                            <div class="r">
                                <div class="number-of-quiz">
                                    <h1>Manual Generated Flashcards</h1>
                                    @Model.ManualQuizCount
                                    @* AI Generated FlashCard: @ViewData["aiFlashcardCount"] *@
                                </div>
                                <div class="number-of-flashcards">
                                    @* Manually Created FlashCard: @ViewData["manualFlashcardCount"] *@
                                </div>
                            </div>
                        </div>
                        <div class="content-created">
                            Total Number of Flashcards: @ViewData["TotalContentCount"] Contents
                        </div>
                    </div>
                </div>

                <div class="quiz-results">
                    Quiz Results
                </div>
                <table class="results-table">
                    <thead>
                        <tr>
                            <th>Quiz Name</th>
                            <th>Score</th>
                            <th>Date Taken</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in (List<UsersApp.Models.ScoreRecord>)ViewData["QuizResults"])
                        {
                            <tr>
                                <td>@result.Quiz.Topic</td> <!-- Display the quiz name -->
                                <td>@result.Score</td>
                                <td>@result.SubmissionDate.ToString("MM/dd/yyyy")</td>
                            </tr>
                        }
                    </tbody>
                </table>
        }
        </div>

        <div asp-validation-summary="All" class="text-danger"></div>


        <div class="f-content">
            <div class="Flashcards section" id="Flashcards" style="display: none;">
                <div class="f-head">
                    <h1>Flashcards</h1>
                </div>
                <div class="f-collection">
                    @if (Model.Flashcards != null && Model.Flashcards.Any())
                    {
                        @foreach (var flashcard in Model.Flashcards)
                        {
                            <div class="flashcard-item" data-title="@flashcard.Title.ToLower()" onclick="takeFlashcard(@flashcard.Id)">
                                <div class="f-info">
                                    <p>@flashcard.Id</p>
                                    <h2>@flashcard.Title &#8203; &#8203; &#8203; @flashcard.Questions.Count Questions</h2>
                                    <h2>@ViewData["Username"]</h2>
                                </div>
                                <div class="bot">
                                    <div class="divider"></div>
                                    <div class="f-desc">@flashcard.Description</div>             
                                </div>                  
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

        <div class="Quiz section" id="Quiz" style="display: none;">
            <div class="Q-Head">
                <h1>Quizzes</h1>
            </div>
            <div class="quizzes-container">
            @foreach (var quiz in Model.Quizzes)
            {
            <button class="flashcard-item" onclick="location.href='@Url.Action("ViewQuizDetails", "QuizCreation", new { id = quiz.QuizId })'">
                <h1>@quiz.Topic</h1>
                <h2>@quiz.GradeLevel</h2>
            </button>
            }
            </div>
        </div>


        

        <div class="AccountSettings section" id="AccountSettings" style="display: none;">
            <h1>Account Settings</h1>
            <div class="personal-info">Personal Information</div>
            <div class="personal-container">
                <div class="userprofile">
                    <div class="drag-drop-container" id="drag-drop-container">
                        <form asp-action="UploadProfileImage" method="post" enctype="multipart/form-data">
                            <div id="drop-area" ondragover="handleDragOver(event)" ondragleave="handleDragLeave(event)" ondrop="handleDrop(event)">
                                <p>Drag and drop a picture here or click to upload</p>
                                <input type="file" id="fileElem" name="profileImage" accept="image/*" onchange="handleFiles(this.files)">
                                <label class="button" for="fileElem">Select a file</label>
                            </div>  
                            <button type="submit" class="Upload">Upload Image</button>
                        </form>
                        <div id="gallery"></div>
                    </div>
                </div>

                <div class="userdetails-container">
                     <form asp-action="AccountEdit" method="post">
                        <div class="username">
                            <h1>Username</h1>
                            <div class="name">
                                <input asp-for="NewUsername" class="fullname" placeholder="@ViewData["Username"]" oninput="checkInput()" autocomplete="off" />
                                <span asp-validation-for="NewUsername" class="text-danger"></span>
                                <button type="submit" class="changepassword" id="saveButton" disabled>Save Username</button>
                            </div>

                        </div>
                    </form>
                </div>
            </div>

            <div class="personal-info">Security and Privacy</div>
    
            <div class="personal-container1">
                <div class="description">
                    <h1>Change Password</h1>
                    <p>"Deleting your account will permanently remove all your data and cannot be undone. Please reconsider before proceeding.</p>
                </div>
                <div class="button-container">
                    <button class="changepassword" onclick="location.href='@Url.Action("ChangePassword", "Account")'">Changepassword</button>
                </div>
            </div>
            <div class="personal-container2">
                <div class="description">
                    <h1>Delete Account</h1>
                    <p>"Deleting your account will permanently remove all your data and cannot be undone. Please reconsider before proceeding.</p>
                </div>
                <div class="button-container">
                    <div class="Logout">
                        <form asp-action="DeleteAccount" method="post">
                            <button type="submit" class="deleteaccount">Delete Account</button>
                        </form>
                    </div>
                </div>
            </div>

            


            <div class="Logout1">
                <form asp-action="Logout" method="post">
                    <button type="submit" class="changepassword">Logout</button>
                </form>
            </div>
        </div>

    
                

    @* <script>
    // Pie Chart 5
    const ctx5 = document.getElementById('myPieChart5').getContext('2d');
    const myPieChart5 = new Chart(ctx5, {
        type: 'pie',
        data: {
            labels: ['AI Generated Quizzes', 'Manually Created Quizzes'],
            datasets: [{
                data: [@Model.AiQuizCount, @Model.ManualQuizCount],
                backgroundColor: [
                    'rgba(58, 183, 26, 1)',
                    'rgba(255, 222, 62, 1)'
                ],
                borderColor: [
                    'rgba(255, 253, 193, 1)',
                    'rgba(255, 253, 193, 1)'
                ],
                borderWidth: 8
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
                tooltip: {
                    enabled: true,
                }
            },
        }
    });

    // Pie Chart 6
    const ctx6 = document.getElementById('myPieChart6').getContext('2d');
    const myPieChart6 = new Chart(ctx6, {
        type: 'pie',
        data: {
            labels: ['AI Generated Flashcards', 'Manually Created Flashcards'],
            datasets: [{
                data: [@ViewData["aiFlashcardCount"], @ViewData["manualFlashcardCount"]],
                backgroundColor: [
                    'rgba(56, 112, 18, 1)',
                    'rgba(255, 207, 4, 1)'
                ],
                borderColor: [
                    'rgba(255, 253, 193, 1)',
                    'rgba(255, 253, 193, 1)'
                ],
                borderWidth: 8
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
                tooltip: {
                    enabled: true,
                }
            },
        }
    });
</script>

<script>
    // Pie Chart 7
    const ctx7 = document.getElementById('myPieChart7').getContext('2d');
    const myPieChart7 = new Chart(ctx7, {
        type: 'pie',
        data: {
            labels: ['AI Generated Quizzes', 'Manually Created Quizzes'],
            datasets: [{
                data: [@Model.AiQuizCount, @Model.ManualQuizCount],
                backgroundColor: [
                    'rgba(58, 183, 26, 1)',
                    'rgba(255, 222, 62, 1)'
                ],
                borderColor: [
                    'rgba(255, 253, 193, 1)',
                    'rgba(255, 253, 193, 1)'
                ],
                borderWidth: 8
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
                tooltip: {
                    enabled: true,
                }
            },
        }
    });

    // Pie Chart 8
    const ctx8 = document.getElementById('myPieChart8').getContext('2d');
    const myPieChart8 = new Chart(ctx8, {
        type: 'pie',
        data: {
            labels: ['AI Generated Flashcards', 'Manually Created Flashcards'],
            datasets: [{
                data: [@ViewData["aiFlashcardCount"], @ViewData["manualFlashcardCount"]],
                backgroundColor: [
                    'rgba(56, 112, 18, 1)',
                    'rgba(255, 207, 4, 1)'
                ],
                borderColor: [
                    'rgba(255, 253, 193, 1)',
                    'rgba(255, 253, 193, 1)'
                ],
                borderWidth: 8
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'bottom',
                },
                tooltip: {
                    enabled: true,
                }
            },
        }
    });
</script> *@

<script>
    function handleDragOver(event) {
        event.preventDefault(); // Prevent default to allow drop
        event.stopPropagation();
        document.getElementById('drop-area').classList.add('highlight');
    }

    function handleDragLeave(event) {
        event.preventDefault();
        event.stopPropagation();
        document.getElementById('drop-area').classList.remove('highlight');
    }

    function handleDrop(event) {
        event.preventDefault();
        event.stopPropagation();
        document.getElementById('drop-area').classList.remove('highlight');

        const files = event.dataTransfer.files;
        if (files.length) {
            document.getElementById('fileElem').files = files; // Assign the dropped files to the input
            handleFiles(files); // Preview the file
        }
    }

    function handleFiles(files) {
        files = [...files];
        previewFile(files[0]);
    }

    function previewFile(file) {
        let reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onloadend = function () {
            let img = document.createElement('img');
            img.src = reader.result;
            img.classList.add('uploaded-image');
            document.querySelector('.Upload').style.display = 'block';

            let gallery = document.getElementById('gallery');
            gallery.innerHTML = ''; // Clear any existing images
            gallery.appendChild(img);

            // Hide the drop area when an image is previewed
            document.getElementById('drop-area').style.display = 'none';
        };
    }
</script>

<script>
    function checkInput() {
        var input = document.querySelector('input[name="NewUsername"]').value;
        var button = document.getElementById('saveButton');
        button.disabled = input.trim() === "";
    }
</script>

<script>
    function showSection(section) {
        var sections = document.querySelectorAll('.section');
        sections.forEach(function (sec) {
            sec.style.display = 'none';
        });
        var selectedSection = document.getElementById(section);
        if (selectedSection.style.display === 'none' || selectedSection.style.display === '') {
            selectedSection.style.display = 'block';
        } else {
            selectedSection.style.display = 'block';
        }
    }
</script>

<script>
    function showReport(reportType) {
        fetch(`/Account/GetContentReport?filter=${reportType}`)
            .then(response => response.text())
            .then(html => {
                document.getElementById('reportContent').innerHTML = html;
            })
            .catch(error => console.error('Error applying filter:', error));
    }

        function showReport(reportType) {
        window.location.href = `/Account/AccountEdit?period=${reportType}`;
    }

    function takeFlashcard(flashcardId) {
        window.location.href = `/FlashCards/FlashCardStudyMode?id=${flashcardId}`;
    }
</script>
</body>
</html>