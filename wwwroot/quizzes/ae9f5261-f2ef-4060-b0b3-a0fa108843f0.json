{"Questions":{"1":"1:**\n\nWhat is the primary purpose of encapsulation in object-oriented programming?","2":"2:**\n\nWhich of the following is NOT a fundamental principle of object-oriented programming?","3":"3:**\n\nWhat does the term \u0022polymorphism\u0022 mean in the context of OOP?","4":"4:**\n\nInheritance allows a class (the subclass) to inherit properties and methods from another class (the superclass). What is the primary benefit of inheritance?","5":"5:**\n\nWhat is an abstract class?","6":"6:**\n\nWhat is the role of a constructor in a class?","7":"7:**\n\nWhat is the difference between a class and an object?","8":"8:**\n\nWhich concept allows objects of different classes to respond to the same method call in their own specific way?","9":"9:**\n\nWhat is method overriding?","10":"10:**\n\nWhat is the purpose of an interface in OOP?"},"Choices":{"1":["a) To allow unrestricted access to an object\u0027s internal data.","b) To hide internal data and methods, protecting them from outside interference.","c) To establish a hierarchical relationship between classes.","d) To define the specific behavior of an object."],"2":["a) Abstraction","b) Inheritance","c) Polymorphism","d) Recursion"],"3":["a) The ability to create multiple instances of the same class.","b) The ability of an object to take on many forms.","c) The process of creating new classes from existing classes.","d) The principle of hiding data within a class."],"4":["a) Increased code complexity.","b) Code redundancy.","c) Code reusability and extensibility.","d) Reduced program performance."],"5":["a) A class that cannot be instantiated.","b) A class that is fully implemented and ready to use.","c) A class that only contains private members.","d) A class that is automatically generated by the compiler."],"6":["a) To destroy an object.","b) To initialize the object\u0027s attributes.","c) To define the class\u0027s inheritance hierarchy.","d) To execute a specific method."],"7":["a) There is no difference; they are synonyms.","b) A class is a blueprint for creating objects; an object is an instance of a class.","c) A class is an instance of an object; an object is a blueprint for creating classes.","d) A class is a data structure; an object is a function."],"8":["a) Encapsulation","b) Inheritance","c) Polymorphism","d) Abstraction"],"9":["a) Defining a method in a subclass with the same name and signature as a method in its superclass.","b) Defining a method in a subclass with a different name than a method in its superclass.","c) Defining multiple methods with the same name but different parameters in a single class.","d) Hiding a method from its superclass."],"10":["a) To define the specific implementation of a method.","b) To define a contract that classes must adhere to.","c) To create an instance of a class.","d) To inherit from multiple classes."]},"Timer":{},"QuizId":0,"CorrectAnswers":{}}