{"Questions":{"1":"{\n  \u0022candidates\u0022: [\n    {\n      \u0022content\u0022: {\n        \u0022parts\u0022: [\n          {\n            \u0022text\u0022: \u0022**","2":"1:**\\n\\nWhich of the following is NOT a fundamental principle of Object-Oriented Programming (OOP)?\\n\\n","3":"2:**\\n\\nWhat is the purpose of encapsulation in OOP?\\n\\n","4":"3:**\\n\\nWhat is polymorphism in OOP?\\n\\n","5":"4:**\\n\\nWhat is inheritance in OOP?\\n\\n","6":"5:**\\n\\nWhat is a class in OOP?\\n\\n","7":"6:**\\n\\nWhat is an object in OOP?\\n\\n","8":"7:**\\n\\nWhat is the difference between a method and a function in the context of OOP?\\n\\n","9":"8:**\\n\\nWhich concept is best illustrated by the ability of a single method name to perform different actions depending on the object it is called on?\\n\\n\\n","10":"9:**\\n\\nWhat does the term \\\u0022Abstraction\\\u0022 refer to in OOP?\\n\\n","11":"10:**\\n\\nWhat is a constructor in OOP?\\n\\n"},"Choices":{"1":["No choice provided.","No choice provided.","No choice provided.","No choice provided."],"2":["\\na) Encapsulation\\nb) Polymorphism\\nc) Recursion\\nd) Inheritance\\n\\n","No choice provided.","No choice provided.","No choice provided."],"3":["\\na) To allow unrestricted access to an object\u0027s internal data.\\nb) To hide internal data and methods, and only expose controlled access through public interfaces.\\nc) To create multiple instances of a class with different data.\\nd) To allow objects of different classes to interact seamlessly.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"4":["\\na) The ability of an object to take on many forms simultaneously.\\nb) The ability of an object to inherit properties from multiple classes.\\nc) The ability of an object to be treated as an instance of its class and any of its superclasses.\\nd) The ability of an object to change its class at runtime.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"5":["\\na) The process of creating a new class from an existing class.\\nb) The ability of an object to change its state.\\nc) The process of destroying an object.\\nd) The ability of an object to interact with other objects.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"6":["\\na) A specific instance of an object.\\nb) A blueprint or template for creating objects.\\nc) A method used to interact with objects.\\nd) A collection of objects.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"7":["\\na) A blueprint for creating classes.\\nb) An instance of a class.\\nc) A method within a class.\\nd) A data type.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"8":["\\na) There is no difference; the terms are interchangeable.\\nb) A method is a function associated with an object, while a function is not.\\nc) A function is a method associated with an object, while a method is not.\\nd) Methods are only used for encapsulation, and functions for other purposes.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"9":["\\na) Inheritance\\nb) Encapsulation\\nc) Polymorphism\\nd) Abstraction\\n\\n","No choice provided.","No choice provided.","No choice provided."],"10":["\\na) Hiding complex implementation details and showing only essential information to the user.\\nb) Creating multiple instances of a class.\\nc)  The process of inheriting from multiple classes.\\nd) The ability to change the data type of a variable at runtime.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"11":["\\na) A method that destroys an object.\\nb) A method that is automatically called when an object of a class is created.\\nc) A method that returns the state of an object.\\nd) A method that modifies the state of an object.\\n\\n","No choice provided.","No choice provided.","No choice provided."]}}