{"Questions":{"1":"{\n  \u0022candidates\u0022: [\n    {\n      \u0022content\u0022: {\n        \u0022parts\u0022: [\n          {\n            \u0022text\u0022: \u0022**","2":"1:**\\n\\nWhich of the following is NOT a fundamental principle of Object-Oriented Programming (OOP)?\\n\\n","3":"2:**\\n\\nEncapsulation in OOP refers to:\\n\\n","4":"3:**\\n\\nWhat is polymorphism?\\n\\n","5":"4:**\\n\\nInheritance in OOP allows:\\n\\n","6":"5:**\\n\\nWhat is an abstract class?\\n\\n","7":"6:**\\n\\nWhat is the purpose of a constructor in a class?\\n\\n","8":"7:**\\n\\nWhat is method overriding?\\n\\n","9":"8:**\\n\\nWhich access modifier restricts access to members of a class only within the same package?\\n\\n","10":"9:**\\n\\nWhat is the difference between composition and aggregation?\\n\\n","11":"10:**\\n\\nWhat design pattern promotes loose coupling between objects?\\n\\n"},"Choices":{"1":["No choice provided.","No choice provided.","No choice provided.","No choice provided."],"2":["\\na) Encapsulation\\nb) Polymorphism\\nc) Recursion\\nd) Inheritance\\n\\n","No choice provided.","No choice provided.","No choice provided."],"3":["\\na) The ability of a class to inherit properties and methods from another class.\\nb) Bundling data and methods that operate on that data within a class, hiding internal details.\\nc) The ability of an object to take on many forms.\\nd) The process of breaking down a problem into smaller, self-contained modules.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"4":["\\na) The ability to create multiple instances of the same class.\\nb) The process of creating new classes from existing classes.\\nc) The ability of an object to take on many forms.\\nd) The process of hiding internal data within a class.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"5":["\\na) Data to be hidden from outside access.\\nb) A class to inherit properties and methods from a parent class.\\nc) Multiple versions of a method to exist.\\nd) Objects to be created dynamically at runtime.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"6":["\\na) A class that cannot be instantiated.\\nb) A class that is fully implemented and can be instantiated.\\nc) A class that only contains private methods.\\nd) A class that only contains static methods.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"7":["\\na) To destroy an object.\\nb) To define the class\u0027s methods.\\nc) To initialize the object\u0027s attributes when it\u0027s created.\\nd) To inherit properties from a parent class.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"8":["\\na) Defining a method with the same name and signature in a subclass as in its superclass.\\nb) Defining a method with a different name in a subclass than in its superclass.\\nc) Defining multiple methods with the same name but different parameters in a class.\\nd) Hiding a method from a superclass in a subclass.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"9":["\\na) public\\nb) private\\nc) protected\\nd) default (package-private)\\n\\n","No choice provided.","No choice provided.","No choice provided."],"10":["\\na) There is no difference; they are synonyms.\\nb) Composition implies a \\\u0022has-a\\\u0022 relationship with a strong ownership; aggregation implies a \\\u0022has-a\\\u0022 relationship with weaker ownership.\\nc) Composition implies a \\\u0022is-a\\\u0022 relationship; aggregation implies a \\\u0022has-a\\\u0022 relationship.\\nd) Composition is used for inheritance; aggregation is used for polymorphism.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"11":["\\na) Singleton\\nb) Factory\\nc) Observer\\nd) All of the above\\n\\n","No choice provided.","No choice provided.","No choice provided."]}}