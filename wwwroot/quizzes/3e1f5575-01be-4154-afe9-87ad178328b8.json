{"Questions":{"1":"1:**\n\nWhich of the following is NOT a fundamental principle of Object-Oriented Programming (OOP)?","2":"2:**\n\nWhat is the purpose of encapsulation in OOP?","3":"3:**\n\nWhat is polymorphism in OOP?","4":"4:**\n\nWhat is inheritance in OOP?","5":"5:**\n\nWhat is a class in OOP?","6":"6:**\r\n\r\nWhat is an object in OOP?","7":"7:**\n\nWhat is the difference between a class and an object?","8":"8:**\n\nWhat is method overriding in OOP?","9":"9:**\n\nWhat is method overloading in OOP?","10":"10:**\n\nWhich of the following best describes abstraction in OOP?","11":"ss"},"Choices":{"1":["a) Encapsulation","b) Polymorphism","c) Compilation","d) Inheritance"],"2":["a) To allow unrestricted access to an object\u0027s internal data.","b) To hide internal data and methods, protecting them from outside access.","c) To define the relationships between different classes.","d) To allow multiple classes to inherit from a single parent class."],"3":["a) The ability of a class to inherit from multiple parent classes.","b) The ability of an object to take on many forms.","c) The process of creating new classes from existing classes.","d) The process of hiding data within a class."],"4":["a) The process of creating new classes from existing classes.","b) The ability of an object to take on many forms.","c) The process of hiding data within a class.","d) The ability of a class to inherit from multiple parent classes (always)."],"5":["a) An instance of an object.","b) A blueprint for creating objects.","c) A method within an object.","d) A variable that stores data."],"6":["a) A blueprint for creating classes.","b) An instance of a class.","c) A method within a class.","d) A variable that stores data."],"7":["a) There is no difference; they are synonymous terms.","b) A class is a blueprint, while an object is a specific instance of that blueprint.","c) A class is an instance, while an object is a blueprint.","d) Classes contain data; objects contain methods."],"8":["a) Defining a method in a subclass that has the same name and signature as a method in its superclass.","b) Defining a method in a superclass that has the same name and signature as a method in its subclass.","c) Hiding a method in a superclass from a subclass.","d) Defining multiple methods with the same name but different parameters."],"9":["a) Defining a method in a subclass that has the same name and signature as a method in its superclass.","b) Defining multiple methods with the same name but different parameters.","c) Hiding a method in a superclass from a subclass.","d) Defining a method in a superclass that has the same name and signature as a method in its subclass."],"10":["a) Hiding internal details and showing only essential information to the user.","b) Defining the relationships between different classes.","c) Creating new classes from existing classes.","d) Allowing objects to take on many forms."],"11":[null,null,null,null]},"Timer":{},"QuizId":0,"CorrectAnswers":{"11":0,"1":0,"2":0,"3":0,"4":3,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0}}