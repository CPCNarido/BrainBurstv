{"Questions":{"1":"{\n  \u0022candidates\u0022: [\n    {\n      \u0022content\u0022: {\n        \u0022parts\u0022: [\n          {\n            \u0022text\u0022: \u0022**","2":"1:**\\n\\nWhat is the fundamental principle of Object-Oriented Programming that bundles data (attributes) and methods (functions) that operate on that data within a single unit?\\n\\n","3":"2:**\\n\\nWhich OOP concept allows a class to inherit properties and methods from another class?\\n\\n","4":"3:**\\n\\nWhat is polymorphism in the context of OOP?\\n\\n","5":"4:**\\n\\nWhat is the purpose of an abstract class in OOP?\\n\\n","6":"5:**\\n\\nWhich of the following is NOT a benefit of using Object-Oriented Programming?\\n\\n","7":"6:**\\n\\nWhat is a constructor in OOP?\\n\\n","8":"7:**\\n\\nWhat is the difference between a class and an object in OOP?\\n\\n","9":"8:**\\n\\nWhich design principle promotes loose coupling between classes?\\n\\n","10":"9:**\\n\\nWhat is method overriding in OOP?\\n\\n","11":"10:**\\n\\nWhat is the principle of data hiding in OOP?\\n\\n"},"Choices":{"1":["No choice provided.","No choice provided.","No choice provided.","No choice provided."],"2":["\\na) Polymorphism\\nb) Inheritance\\nc) Encapsulation\\nd) Abstraction\\n\\n","No choice provided.","No choice provided.","No choice provided."],"3":["\\na) Abstraction\\nb) Encapsulation\\nc) Polymorphism\\nd) Inheritance\\n\\n","No choice provided.","No choice provided.","No choice provided."],"4":["\\na) The ability to hide internal implementation details.\\nb) The ability of an object to take on many forms.\\nc) The process of creating new classes from existing classes.\\nd) The bundling of data and methods within a unit.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"5":["\\na) To provide a blueprint for subclasses without being instantiated itself.\\nb) To define methods that must be implemented by its subclasses.\\nc) Both a) and b)\\nd) Neither a) nor b)\\n\\n","No choice provided.","No choice provided.","No choice provided."],"6":["\\na) Improved code reusability\\nb) Increased code complexity\\nc) Enhanced code maintainability\\nd) Better modularity\\n\\n","No choice provided.","No choice provided.","No choice provided."],"7":["\\na) A method that destroys an object.\\nb) A special method that initializes an object when it\u0027s created.\\nc) A method that returns the object\u0027s type.\\nd) A method that changes the object\u0027s state.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"8":["\\na) A class is an instance of an object.\\nb) An object is an instance of a class.\\nc) There is no difference; they are interchangeable terms.\\nd) A class defines the methods, while an object defines the data.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"9":["\\na) Inheritance\\nb) Encapsulation\\nc) Abstraction\\nd) All of the above\\n\\n","No choice provided.","No choice provided.","No choice provided."],"10":["\\na) Defining a method with the same name and parameters in a subclass as in a superclass.\\nb) Defining a method with a different name in a subclass than in a superclass.\\nc) Hiding a method from a superclass in a subclass.\\nd) Calling a method from a superclass in a subclass.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"11":["\\na) Making all data members public.\\nb) Restricting direct access to internal data of an object.\\nc) Making all methods public.\\nd) Exposing all internal implementation details.\\n\\n","No choice provided.","No choice provided.","No choice provided."]}}