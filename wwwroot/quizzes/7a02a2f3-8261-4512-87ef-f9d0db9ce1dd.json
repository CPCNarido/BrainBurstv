{"Questions":{"1":"1:**\n\nWhat is the fundamental concept of Object-Oriented Programming (OOP)?","2":"2:**\n\nWhich of the following is NOT a core principle of OOP?","3":"3:**\n\nWhat is encapsulation in OOP?","4":"4:**\n\nWhat is inheritance in OOP?","5":"5:**\n\nWhat is polymorphism in OOP?","6":"6:**\n\nWhat is an object in OOP?","7":"7:**\n\nWhat is a class in OOP?","8":"8:**\n\nWhat is a method in OOP?","9":"9:**\n\nWhat is an attribute in OOP?","10":"10:**\n\nWhat is constructor in OOP?","11":"11:**\n\nWhat is a destructor in OOP?","12":"12:**\n\nWhat is abstraction in OOP?","13":"13:**\n\nWhat is the purpose of access modifiers (e.g., public, private, protected)?","14":"14:**\n\nWhat does \u0022public\u0022 access modifier mean?","15":"15:**\n\nWhat does \u0022private\u0022 access modifier mean?","16":"16:**\n\nWhat does \u0022protected\u0022 access modifier mean?","17":"17:**\n\nWhat is method overriding?","18":"18:**\n\nWhat is method overloading?","19":"19:**\n\nWhat is static member?","20":"20:**\n\nWhat is a superclass (or base class)?","21":"21:**\n\nWhat is a subclass (or derived class)?","22":"22:**\n\nWhat is the \u201Cthis\u201D keyword used for?","23":"23:**\n\nWhat is an interface?","24":"24:**\n\nWhat is abstract class?","25":"25:**\n\nWhat is the purpose of design patterns?","26":"26:**\n\nWhich design pattern promotes loose coupling?","27":"27:**\n\nWhat is the difference between composition and aggregation?","28":"28:**\n\nWhat is a singleton pattern?","29":"29:**\n\nWhat is a factory pattern?","30":"30:**\n\nWhat is an observer pattern?","31":"31:**\n\nWhat is a strategy pattern?","32":"32:**\n\nWhat is a template method pattern?","33":"33:**\n\nWhat is a facade pattern?","34":"34:**\n\nWhat is an adapter pattern?","35":"35:**\n\nWhat is a decorator pattern?","36":"36:**\n\nWhat is a proxy pattern?","37":"37:**\n\nWhat is a command pattern?","38":"38:**\n\nWhat is an iterator pattern?","39":"39:**\n\nWhat is a visitor pattern?","40":"40:**\n\nWhat is a state pattern?","41":"41:**\n\nWhat is a chain of responsibility pattern?","42":"42:**\n\nWhat is a mediator pattern?","43":"43:**\n\nWhat is an interpreter pattern?","44":"44:**\n\nWhat is a memento pattern?","45":"45:**\n\nWhat is a null object pattern?","46":"46:**\n\nWhat is a prototype pattern?","47":"47:**\n\nWhat is a builder pattern?","48":"48:**\n\nWhat is a flyweight pattern?","49":"49:**\n\nWhat is a bridge pattern?","50":"50:**\n\nWhat is a composite pattern?"},"Choices":{"1":["a) Procedural programming","b) Modular programming","c) Data abstraction and encapsulation","d) Functional programming"],"2":["a) Encapsulation","b) Inheritance","c) Polymorphism","d) Compilation"],"3":["a) Hiding internal data and methods","b) Creating multiple classes","c) Extending existing classes","d) Overloading methods"],"4":["a) Creating new classes from existing ones","b) Hiding data from access","c) Overriding methods","d) Defining data types"],"5":["a) Using the same name for different methods","b) Hiding internal data","c) Extending classes","d) Creating multiple objects"],"6":["a) A data structure","b) An instance of a class","c) A method","d) A variable"],"7":["a) A blueprint for creating objects","b) An instance of an object","c) A method","d) A variable"],"8":["a) A data structure","b) A function associated with a class","c) A variable","d) An object"],"9":["a) A function","b) A variable associated with a class","c) An object","d) A method"],"10":["a) A method that initializes an object","b) A method that destroys an object","c) A variable","d) A class"],"11":["a) A method that initializes an object","b) A method that destroys an object","c) A variable","d) A class"],"12":["a) Hiding implementation details","b) Showing all implementation details","c) Creating multiple objects","d) Inheriting from multiple classes"],"13":["a) To control access to class members","b) To define data types","c) To create objects","d) To inherit from classes"],"14":["a) Accessible only within the same class","b) Accessible from anywhere","c) Accessible only within the same package","d) Accessible only within derived classes"],"15":["a) Accessible from anywhere","b) Accessible only within the same class","c) Accessible only within the same package","d) Accessible only within derived classes"],"16":["a) Accessible from anywhere","b) Accessible only within the same class and derived classes","c) Accessible only within the same package","d) Accessible only within derived classes"],"17":["a) Defining a method with the same name in a subclass","b) Defining a method with a different name in a subclass","c) Defining multiple methods with the same name in the same class","d) Hiding a method in a subclass"],"18":["a) Defining a method with the same name in a subclass","b) Defining multiple methods with the same name in the same class but with different parameters","c) Defining a method with a different name in a subclass","d) Hiding a method in a subclass"],"19":["a) A member that belongs to the object","b) A member that belongs to the class","c) A member that is inherited","d) A member that is polymorphic"],"20":["a) A class that inherits from another class","b) A class that is inherited from another class","c) A class that has no methods","d) A class that has no attributes"],"21":["a) A class that inherits from another class","b) A class that is inherited from another class","c) A class that has no methods","d) A class that has no attributes"],"22":["a) To refer to the current object","b) To refer to a superclass","c) To refer to a subclass","d) To refer to a static member"],"23":["a) A class that cannot be instantiated","b) A class that implements methods","c) A specification of methods a class must implement","d) A class that inherits from another class"],"24":["a) A class that can be instantiated","b) A class that cannot be instantiated and may contain abstract methods","c) A class that implements methods","d) A class that has no attributes"],"25":["a) To write less efficient code","b) To provide reusable solutions to common programming problems","c) To make code more complex","d) To avoid using OOP principles"],"26":["a) Singleton","b) Observer","c) Factory","d) All of the above"],"27":["a) Composition implies ownership, aggregation does not","b) Aggregation implies ownership, composition does not","c) There is no difference","d) Composition uses inheritance, aggregation does not"],"28":["a) A pattern that ensures only one instance of a class exists","b) A pattern that creates multiple instances of a class","c) A pattern for handling exceptions","d) A pattern for database access"],"29":["a) A pattern that creates objects without specifying their concrete classes","b) A pattern that creates only one instance of a class","c) A pattern for handling exceptions","d) A pattern for database access"],"30":["a) A pattern that creates objects without specifying their concrete classes","b) A pattern that ensures only one instance of a class exists","c) A pattern where objects are notified of changes in other objects","d) A pattern for database access"],"31":["a) Encapsulates algorithms","b) Encapsulates data","c) Encapsulates classes","d) Encapsulates objects"],"32":["a) Defines the skeleton of an algorithm","b) Defines the data structure of an algorithm","c) Defines the steps of an algorithm","d) Defines the implementation of an algorithm"],"33":["a) Provides a simplified interface to a complex subsystem","b) Provides a complex interface to a simple subsystem","c) Provides no interface to a subsystem","d) Provides a redundant interface to a subsystem"],"34":["a) Converts the interface of a class into another interface clients expect","b) Adapts classes to use different data types","c) Adapts classes to use different algorithms","d) Adapts classes to different programming languages"],"35":["a) Adds responsibilities to objects dynamically","b) Removes responsibilities from objects dynamically","c) Changes the behavior of objects dynamically","d) Creates new objects dynamically"],"36":["a) Controls access to another object","b) Creates new objects","c) Deletes objects","d) Modifies objects"],"37":["a) Encapsulates a request as an object","b) Encapsulates data as an object","c) Encapsulates algorithms as an object","d) Encapsulates classes as an object"],"38":["a) Provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation","b) Provides a way to access the elements of an aggregate object randomly","c) Provides a way to create new aggregate objects","d) Provides a way to delete aggregate objects"],"39":["a) Represents an operation to be performed on the elements of an object structure","b) Represents a structure of objects","c) Represents an algorithm","d) Represents data"],"40":["a) Allows an object to alter its behavior when its internal state changes","b) Allows an object to maintain its behavior regardless of its internal state","c) Allows an object to change its class","d) Allows an object to change its data type"],"41":["a) Avoids coupling the sender of a request to its receiver by giving more than one object a chance to handle the request","b) Couples the sender of a request to its receiver","c) Does not handle requests","d) Handles only one request"],"42":["a) Defines an object that encapsulates how a set of objects interact","b) Defines objects that do not interact","c) Defines a complex interaction between objects","d) Defines a simple interaction between objects"],"43":["a) Given a language, defines a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language","b) Interprets data structures","c) Interprets algorithms","d) Interprets classes"],"44":["a) Without violating encapsulation, captures and externalizes an object\u0027s internal state so that the object can be restored to this state later","b) Violates encapsulation","c) Does not capture internal states","d) Does not restore internal states"],"45":["a) Represents the absence of an object","b) Represents the presence of an object","c) Represents a complex object","d) Represents a simple object"],"46":["a) Specifies the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype","b) Specifies the kinds of objects not to create","c) Does not create new objects","d) Creates only one object"],"47":["a) Separates the construction of a complex object from its representation so that the same construction process can create different representations","b) Combines the construction of a complex object with its representation","c) Does not construct complex objects","d) Constructs only simple objects"],"48":["a) Uses sharing to support large numbers of fine-grained objects efficiently","b) Does not use sharing","c) Does not support large numbers of objects","d) Supports only large objects"],"49":["a) Decouples an abstraction from its implementation so that the two can vary independently","b) Couples an abstraction from its implementation","c) Does not vary independently","d) Does not decouple abstraction and implementation"],"50":["a) Composes objects into tree structures to represent part-whole hierarchies","b) Does not compose objects","c) Does not represent part-whole hierarchies","d) Represents only simple hierarchies"]}}