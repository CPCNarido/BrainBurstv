{"Questions":{"1":"1:**\n\nWhat is the core principle of Object-Oriented Programming (OOP) that bundles data and methods that operate on that data within a single unit?","2":"2:**\n\nWhich OOP concept allows a class to inherit properties and methods from another class?","3":"3:**\n\nWhat is the term for a class that cannot be instantiated directly, but serves as a blueprint for other classes?","4":"4:**\n\nWhat is polymorphism?","5":"5:**\n\nWhat is abstraction in OOP?","6":"6:**\n\nWhat keyword is used in Java to define a class that cannot be instantiated?","7":"7:**\n\nWhat is a constructor in OOP?","8":"8:**\n\nWhat is a destructor in OOP (if supported by the language)?","9":"9:**\n\nWhat is method overriding?","10":"10:**\n\nWhat is method overloading?","11":"11:**\n\nWhat is an interface in OOP (e.g., in Java or C#)?","12":"12:**\n\nWhich access modifier makes a class member accessible only within the same class?","13":"13:**\n\nWhich access modifier makes a class member accessible within the same class and its subclasses?","14":"14:**\n\nWhich access modifier makes a class member accessible from anywhere?","15":"15:**\n\nWhat is a class in OOP?","16":"16:**\n\nWhat is an object in OOP?","17":"17:**\n\nWhat does DRY stand for in the context of OOP and programming in general?","18":"18:**\n\nWhat is the purpose of using design patterns in OOP?","19":"19:**\n\nWhat is the Singleton design pattern?","20":"20:**\n\nWhat is the Factory design pattern?","21":"21:**\n\nWhat is the Observer design pattern?","22":"22:**\n\nWhat is the purpose of a static method?","23":"23:**\n\nWhat is the difference between \u0060==\u0060 and \u0060.equals()\u0060 when comparing objects in Java?","24":"24:**\n\nWhat is the purpose of an accessor method (getter)?","25":"25:**\n\nWhat is the purpose of a mutator method (setter)?","26":"26:**\n\nWhat does the term \u0022coupling\u0022 refer to in software design?","27":"27:**\n\nWhat does the term \u0022cohesion\u0022 refer to in software design?","28":"28:**\n\nWhat is a design principle that promotes loose coupling and high cohesion?","29":"29:**\n\nWhat is a common characteristic of well-designed classes?","30":"30:**\n\nWhat is the Liskov Substitution Principle?","31":"31:**\n\nWhat is the Open/Closed Principle?","32":"32:**\n\nWhat is the Dependency Inversion Principle?","33":"33:**\n\nWhat is the Single Responsibility Principle?","34":"34:**\n\nWhich design pattern is often used to implement the strategy pattern?","35":"35:**\n\nWhat is the purpose of using inheritance in OOP?","36":"36:**\n\nWhat is a potential drawback of using inheritance extensively?","37":"37:**\n\nWhat is composition in OOP?","38":"38:**\n\nWhat is the difference between composition and aggregation?","39":"39:**\n\nWhich design pattern promotes loose coupling by introducing an intermediary between objects?","40":"40:**\n\nWhat is the Decorator pattern used for?","41":"41:**\n\nWhat is the Adapter pattern used for?","42":"42:**\n\nWhat is the Facade pattern used for?","43":"43:**\n\nWhich pattern is characterized by a chain of handlers that process a request until one of them handles it?","44":"44:**\n\nWhich pattern encapsulates a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations?","45":"45:**\n\nWhich pattern defines the skeleton of an algorithm in an operation, deferring some steps to subclasses?","46":"46:**\n\nWhat is the difference between a class and a struct in C\u002B\u002B?","47":"47:**\n\nIn C\u002B\u002B, what keyword is used to prevent a class from being inherited from?","48":"48:**\n\nWhat is the concept of \u0022code smells\u0022 in software development?","49":"49:**\n\nWhat is refactoring?","50":"50:**\n\nWhich principle emphasizes creating small, focused classes with well-defined responsibilities?"},"Choices":{"1":["a) Inheritance","b) Polymorphism","c) Encapsulation","d) Abstraction"],"2":["a) Polymorphism","b) Abstraction","c) Encapsulation","d) Inheritance"],"3":["a) Abstract class","b) Concrete class","c) Interface","d) Both a and c"],"4":["a)  The ability of an object to take on many forms.","b)  The process of hiding internal details and showing only essential information.","c)  The ability of a class to inherit from multiple classes.","d)  The mechanism of bundling data and methods."],"5":["a)  The process of hiding complex implementation details.","b)  The ability of an object to change its behavior at runtime.","c)  The inheritance of properties and methods from a parent class.","d)  The ability to create multiple classes from a single class."],"6":["a) \u0060static\u0060","b) \u0060final\u0060","c) \u0060abstract\u0060","d) \u0060private\u0060"],"7":["a) A method that returns a value.","b) A special method used to initialize an object.","c) A variable that stores the object\u0027s state.","d) A method that destroys an object."],"8":["a) A method that creates an object.","b) A method that initializes an object.","c) A method that deallocates the memory used by an object.","d) A method that returns a value."],"9":["a) Defining a method in a subclass with the same name and signature as a method in its superclass.","b) Defining a method in a subclass with a different name than a method in its superclass.","c) Defining a method in a superclass with the same name and signature as a method in its subclass.","d) Defining multiple methods with the same name but different parameters in a single class."],"10":["a) Defining multiple methods with the same name but different parameters in a single class.","b) Defining a method in a subclass with the same name and signature as a method in its superclass.","c) Defining a method in a superclass with the same name and signature as a method in its subclass.","d) Defining multiple methods with different names in a single class."],"11":["a) A class that can be instantiated.","b) A blueprint that defines methods but doesn\u0027t provide implementation.","c) A type of variable.","d) A data structure."],"12":["a) \u0060public\u0060","b) \u0060protected\u0060","c) \u0060private\u0060","d) \u0060static\u0060"],"13":["a) \u0060public\u0060","b) \u0060protected\u0060","c) \u0060private\u0060","d) \u0060static\u0060"],"14":["a) \u0060public\u0060","b) \u0060protected\u0060","c) \u0060private\u0060","d) \u0060static\u0060"],"15":["a) An instance of an object.","b) A blueprint for creating objects.","c) A method within an object.","d) A data type."],"16":["a) A blueprint for creating classes.","b) An instance of a class.","c) A method within a class.","d) A data type."],"17":["a) Design, Reuse, Yield","b) Don\u0027t Repeat Yourself","c) Define, Refactor, Yield","d) Data, Reuse, Yield"],"18":["a) To make code more complex.","b) To provide reusable solutions to common software design problems.","c) To avoid using inheritance.","d) To increase code execution time."],"19":["a) A pattern that ensures only one instance of a class is created.","b) A pattern that uses inheritance extensively.","c) A pattern that promotes code duplication.","d) A pattern for managing multiple database connections."],"20":["a) A pattern for creating objects without specifying their concrete classes.","b) A pattern for managing database connections.","c) A pattern for handling exceptions.","d) A pattern for ensuring only one instance of a class is created."],"21":["a) A pattern for creating objects without exposing creation logic.","b) A pattern where one object notifies its dependents of any state changes.","c) A pattern that ensures only one instance of a class exists.","d) A pattern for managing database connections."],"22":["a) To be called only on an instance of a class.","b) To be associated with the class itself, not a specific object.","c) To be inherited by subclasses but not overridden.","d) To always return a null value."],"23":["a) There is no difference.","b) \u0060==\u0060 compares references, while \u0060.equals()\u0060 compares content.","c) \u0060==\u0060 compares content, while \u0060.equals()\u0060 compares references.","d) \u0060==\u0060 is used for strings, \u0060.equals()\u0060 is used for other objects."],"24":["a) To modify the value of a private member variable.","b) To return the value of a private member variable.","c) To create a new object.","d) To destroy an object."],"25":["a) To return the value of a private member variable.","b) To modify the value of a private member variable.","c) To create a new object.","d) To destroy an object."],"26":["a) The level of dependency between different parts of the code.","b) The number of objects in a system.","c) The complexity of the code.","d) The efficiency of the code."],"27":["a) The level of dependency between different modules.","b) How well the elements within a module belong together.","c) The number of lines of code in a program.","d) The efficiency of the code."],"28":["a) Inheritance","b) Polymorphism","c) Encapsulation","d) All of the above"],"29":["a) High coupling, low cohesion","b) Low coupling, high cohesion","c) High coupling, high cohesion","d) Low coupling, low cohesion"],"30":["a) Subtypes should be substitutable for their base types without altering the correctness of the program.","b) A class should only have one reason to change.","c) Classes should be open for extension, but closed for modification.","d) Depend upon abstractions, not concretions."],"31":["a) Subtypes should be substitutable for their base types without altering the correctness of the program.","b) A class should only have one reason to change.","c) Classes should be open for extension, but closed for modification.","d) Depend upon abstractions, not concretions."],"32":["a) Subtypes should be substitutable for their base types without altering the correctness of the program.","b) A class should only have one reason to change.","c) Classes should be open for extension, but closed for modification.","d) Depend upon abstractions, not concretions."],"33":["a) Subtypes should be substitutable for their base types without altering the correctness of the program.","b) A class should only have one reason to change.","c) Classes should be open for extension, but closed for modification.","d) Depend upon abstractions, not concretions."],"34":["a) Singleton","b) Factory","c) Observer","d) Interface"],"35":["a) To avoid code duplication","b) To achieve polymorphism","c) To establish a \u0022is-a\u0022 relationship between classes","d) All of the above"],"36":["a) Increased code reusability","b) Tight coupling between classes","c) Improved code readability","d) Enhanced flexibility"],"37":["a) A \u0022has-a\u0022 relationship between classes.","b) A \u0022is-a\u0022 relationship between classes.","c) A way to create multiple instances of a class.","d) A way to override methods."],"38":["a) There is no difference.","b) Composition implies stronger ownership; the part cannot exist without the whole. Aggregation allows for independent existence.","c) Aggregation implies stronger ownership; the part cannot exist without the whole. Composition allows for independent existence.","d) Composition is used for inheritance; aggregation is not."],"39":["a) Singleton","b) Factory","c) Mediator","d) Observer"],"40":["a) Adding responsibilities to objects dynamically.","b) Creating singleton objects.","c) Managing database connections.","d) Implementing the observer pattern."],"41":["a) Converting the interface of a class into another interface clients expect.","b) Adding responsibilities to objects dynamically.","c) Creating singleton objects.","d) Implementing the observer pattern."],"42":["a) Providing a simplified interface to a complex subsystem.","b) Adding responsibilities to objects dynamically.","c) Creating singleton objects.","d) Implementing the observer pattern."],"43":["a) Command","b) Chain of Responsibility","c) Strategy","d) Template Method"],"44":["a) Command","b) Chain of Responsibility","c) Strategy","d) Template Method"],"45":["a) Command","b) Chain of Responsibility","c) Strategy","d) Template Method"],"46":["a) There is no difference.","b) Structs have public members by default; classes have private members by default.","c) Classes have public members by default; structs have private members by default.","d) Structs cannot be inherited from; classes can."],"47":["a) \u0060static\u0060","b) \u0060virtual\u0060","c) \u0060final\u0060","d) \u0060private\u0060"],"48":["a) Literally the smell of old code.","b) Indicators of potential problems in the code\u0027s design or implementation.","c) A type of software bug.","d) A type of software testing technique."],"49":["a) Rewriting the entire code from scratch.","b) Restructuring existing code without changing its external behavior.","c) Adding new features to the software.","d) Debugging the software."],"50":["a) Single Responsibility Principle","b) Open/Closed Principle","c) Liskov Substitution Principle","d) Dependency Inversion Principle"]}}