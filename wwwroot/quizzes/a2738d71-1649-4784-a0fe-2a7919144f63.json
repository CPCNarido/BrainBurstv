{"Questions":{"1":"{\n  \u0022candidates\u0022: [\n    {\n      \u0022content\u0022: {\n        \u0022parts\u0022: [\n          {\n            \u0022text\u0022: \u0022**","2":"1:**\\n\\nWhat is the primary purpose of encapsulation in object-oriented programming?\\n\\n","3":"2:**\\n\\nWhich of the following best describes polymorphism?\\n\\n","4":"3:**\\n\\nWhat is inheritance in object-oriented programming?\\n\\n","5":"4:**\\n\\nWhat is the difference between an abstract class and an interface? (Choose the most accurate answer.)\\n\\n","6":"5:**\\n\\nWhat is method overriding?\\n\\n","7":"6:**\\n\\nWhich design principle emphasizes creating loose coupling between classes?\\n\\n","8":"7:**\\n\\nWhat is a constructor in OOP?\\n\\n","9":"8:**\\n\\nWhat is the purpose of a destructor (if supported by the language)?\\n\\n"},"Choices":{"1":["No choice provided.","No choice provided.","No choice provided.","No choice provided."],"2":["\\na) To allow unrestricted access to an object\u0027s internal data.\\nb) To hide the internal data and implementation details of an object, exposing only a public interface.\\nc) To establish a hierarchical relationship between classes.\\nd) To define the methods an object can perform.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"3":["\\na) The ability of a class to inherit from multiple parent classes.\\nb) The ability of an object to take on many forms, allowing objects of different classes to be treated as objects of a common type.\\nc) The process of creating new classes from existing classes.\\nd) The mechanism that restricts access to members of a class.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"4":["\\na) The process of creating multiple objects of the same class.\\nb) The ability of a class to acquire the properties and methods of another class.\\nc) The process of destroying an object.\\nd) A method that returns the type of an object.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"5":["\\na) There is no difference; they are interchangeable terms.\\nb) An abstract class can have both abstract and concrete methods, while an interface can only have abstract methods (in many languages, including Java and C#).\\nc) An abstract class can have instance variables, while an interface cannot.\\nd) Both b and c are correct.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"6":["\\na) Defining a method with the same name in a subclass as it has in its superclass.\\nb) Calling a method of a superclass from within a subclass.\\nc) Hiding a method of a superclass by defining a method with the same name and signature in a subclass.\\nd)  Defining a new method in a subclass that is unrelated to any methods in the superclass.\\n\\n\\n","No choice provided.","No choice provided.","No choice provided."],"7":["\\na) Inheritance\\nb) Polymorphism\\nc) Encapsulation\\nd) Dependency Inversion\\n\\n\\n","No choice provided.","No choice provided.","No choice provided."],"8":["\\na) A method used to destroy an object.\\nb) A special method automatically called when an object of a class is created.\\nc) A method that returns the object\u0027s type.\\nd) A variable that holds the object\u0027s data.\\n\\n","No choice provided.","No choice provided.","No choice provided."],"9":["\\na) To create an object.\\nb) To initialize an object.\\nc) To release resources held by an object before it is destroyed.\\nd) To copy an object.\\n\\n","No choice provided.","No choice provided.","No choice provided."]}}